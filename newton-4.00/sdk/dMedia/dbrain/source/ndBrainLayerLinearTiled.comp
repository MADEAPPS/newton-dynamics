/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define TILES_BITS      4
#define TILE_SIZE       (1<<TILES_BITS)
#define WORKGROUP_SIZE  (TILE_SIZE * TILE_SIZE)

layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform UniformBufferObject 
{
    int m_matrixRows;
    int m_matrixColumns;
    int m_matrixRowsStride;
    int m_matrixColumnsStride;
    int m_workGroupsPerMatrix;

    int m_paramStart;
    int m_inputStart;
    int m_outputStart;
    int m_workBufferSize;
};

layout(std430, binding = 1) buffer inputOutputBuffer
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) readonly buffer newralNetParameters
{
    float m_weightsAndBias[];
};

shared float inputVector [2048];

// 32 way bank conflict on nvidia
//shared float tile [TILE_SIZE] [TILE_SIZE]; 

// 2 ways bank conflict on nvidia, so far best result
shared float tile [TILE_SIZE] [TILE_SIZE + 1];

// 0 ways bank conflict on nvidia, but seem far slower 
//shared float tile [TILE_SIZE] [33];

// perform a full vector * matrix operation
void main() 
{
    uint matrixRows = m_matrixRows;
    uint matrixColumns = m_matrixColumns;
    uint matrixColumnStride = m_matrixColumnsStride;

    uint inputOutputHigh = gl_WorkGroupID.x / m_workGroupsPerMatrix;
    uint inputOutputLow = gl_WorkGroupID.x - inputOutputHigh * m_workGroupsPerMatrix;
    uint inputOffset = m_inputStart + inputOutputHigh * m_workBufferSize;
    
    for (uint block = 0; block < matrixColumns; block += gl_WorkGroupSize.x)
    {
        uint index = block + gl_LocalInvocationID.x;
        inputVector[index] = m_inputOutputData[inputOffset + index];
    }
    memoryBarrierShared(); 
    barrier();

    float acc = 0.0;
    uint matrixRowsStart = inputOutputLow * TILE_SIZE;

    uint tileY = gl_LocalInvocationID.x >> TILES_BITS;
    uint tileX = gl_LocalInvocationID.x & (TILE_SIZE - 1);

    uint tileYBase = tileY + matrixRowsStart;
    uint YOffset = m_paramStart + tileYBase * matrixColumnStride + tileX;
    for (uint tileIndex = 0; tileIndex < matrixColumns; tileIndex += TILE_SIZE)
    {
        if (tileYBase < m_matrixRows)
        {
            if ((tileX + tileIndex) < matrixColumns)
            {
                float a = inputVector[tileIndex + tileX];
                float b = m_weightsAndBias[YOffset + tileIndex];
                acc += a * b;
            }
        }
    }

    // save transpose tile, 
    tile[tileX][tileY] = acc;
    memoryBarrierShared(); 
    barrier();

#if 1
    if (tileX < TILE_SIZE)
    {
        acc = 0.0;
        for (uint tileIndex = 0; tileIndex < TILE_SIZE; tileIndex ++)
        {
            acc += tile[tileIndex][tileX];
        }
    }

#else

    // fewer operations but more barries, but comes out slower on nvidia gpus.
    if (tileY < TILE_SIZE/2)
    {
        acc = tile[tileY][tileX];
    }
    for (uint tileIndex = TILE_SIZE/2; tileIndex > 0; tileIndex = tileIndex / 2)
    {
        if (tileY < tileIndex)
        {
            acc += tile[tileY + tileIndex][tileX];
            if (tileY >= tileIndex / 2)
            {
                tile[tileY][tileX] = acc;
            }
        }
        memoryBarrierShared(); 
        barrier();
    }
#endif
    
    if (tileX < TILE_SIZE)
    {
        uint biasOffset = m_paramStart + matrixColumnStride * matrixRows;
        uint outputOffset = m_outputStart + matrixRowsStart + inputOutputHigh * m_workBufferSize;
        acc += m_weightsAndBias[biasOffset + matrixRowsStart + tileX];
        m_inputOutputData[outputOffset + tileX] = acc;
    }
}