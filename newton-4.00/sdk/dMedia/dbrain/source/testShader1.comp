/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define WORKGROUP_SIZE 128
layout (local_size_x = WORKGROUP_SIZE) in;

// use std140 for uniform buffers, data is 16 byte aligned
layout(std140, binding = 0) uniform UniformBufferObject 
{
    int m_inputSize;
};

// use std430 buffer semantic, data is word aligned 
layout(std430, binding = 1) readonly buffer inputBuffer
{
   float m_input[];
};

layout(std430, binding = 2) buffer outputBuffer
{
   float m_output[];
};

shared float reductionBuffer [WORKGROUP_SIZE];

void main() 
{
    uint index = gl_GlobalInvocationID.x;
    if(index >= m_inputSize)
    {
        return;
    }

    float acc = subgroupAdd(m_input[index]);

    uint mask = gl_SubgroupSize - 1;
    if (gl_LocalInvocationID.x < gl_SubgroupSize)
    {
        reductionBuffer[gl_LocalInvocationID.x] = 0.0f;
    }

    if ((gl_LocalInvocationID.x & mask) == 0)
    {
        //uint index = (gl_LocalInvocationID.x >> m_subgroupsSizeBit);
        uint index = (gl_LocalInvocationID.x >> 5);
        if (index < gl_NumSubgroups)
        {
            reductionBuffer[index] = acc;
        }
    }
    memoryBarrierShared(); 
    barrier();

    if (gl_LocalInvocationID.x < gl_SubgroupSize)
    {
        acc = subgroupAdd(reductionBuffer[gl_LocalInvocationID.x]);
        if (gl_LocalInvocationID.x == 0)
        {
            m_output[gl_LocalInvocationID.x] = acc;
        }
    }
}