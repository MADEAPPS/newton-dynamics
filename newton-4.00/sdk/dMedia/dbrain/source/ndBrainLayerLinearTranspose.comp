/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450
#define WORKGROUP_SIZE 128
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform UniformBufferObject 
{
    int m_matrixRows;
    int m_matrixColumns;
    int m_matrixColumnsStride;

    int m_paramStart;
    int m_inputStart;
    int m_outputStart;
    int m_workBufferSize;
};

layout(std430, binding = 1) buffer inputOutputBuffer
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) readonly buffer newralNetParameters
{
    float m_weightsAndBias[];
};

shared float inputVector [2048];

// perform a full vector * matrix operation
void main() 
{
    uint batchBase = gl_WorkGroupID.x * m_workBufferSize;

    uint paramOffset = m_paramStart;
    uint inputOffset = batchBase + m_inputStart;
    uint outputOffset = batchBase + m_outputStart;

    uint matrixRows = m_matrixRows;
    uint matrixColumns = m_matrixColumns;
    uint matrixColumnsStride = m_matrixColumnsStride;

    for (uint rowIndex = 0; rowIndex < matrixRows; rowIndex += gl_WorkGroupSize.x)
    {
        inputVector[rowIndex + gl_LocalInvocationID.x] = m_inputOutputData[inputOffset + rowIndex + gl_LocalInvocationID.x];
    }
    memoryBarrierShared(); 
    barrier();

    for (uint columnBase = gl_LocalInvocationID.x; columnBase < matrixColumns; columnBase += gl_WorkGroupSize.x)
    {
        float partialSum = 0.0f;
        uint rowOffset = paramOffset;
        for (uint rowIndex = 0; rowIndex < matrixRows; rowIndex ++)
        {
            float scale = inputVector[rowIndex];
            partialSum += scale * m_weightsAndBias[rowOffset + columnBase];
            rowOffset += matrixColumnsStride;
        }
        partialSum += m_weightsAndBias[rowOffset + columnBase];

        //if ((columnBase & 1) == 1)
        //    partialSum = float(columnBase);
        // else
        //    partialSum = -1.0f; //float (-columnBase);

        m_inputOutputData[outputOffset + columnBase] = partialSum;
    }
}