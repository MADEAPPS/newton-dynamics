/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE  256
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform param
{
    uint m_matrixRows;
    uint m_matrixColumns;
    uint m_inputOutputBlockSize;
 };

layout(std430, binding = 1) buffer inputOutputBuffer
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) readonly buffer newralNetParameters
{
    float m_weightsAndBias[];
};

shared float reductionBuffer [WORKGROUP_SIZE];

// a matrix time a vector by interating over each row of the matrix 
// calculating an dot product of that row time the vector and adding the bias value.
void main() 
{
    uint biasOffset = m_matrixRows * m_matrixColumns;

    uint inputOffset = gl_WorkGroupID.x * m_inputOutputBlockSize;
    uint outputOffset = inputOffset + m_matrixColumns;

    uint numberOfIterations = m_matrixColumns / WORKGROUP_SIZE;
    uint roundedGroupIterations = numberOfIterations * WORKGROUP_SIZE;
    uint residualPasses = m_matrixColumns - roundedGroupIterations;

    for (uint i = 0; i < m_matrixRows; ++i)
    {
        float partialSum = 0.0f;
        uint stride = i * m_matrixColumns;
        for (uint j = 0; j < roundedGroupIterations; j += WORKGROUP_SIZE)
        {
            float a = m_weightsAndBias[stride + gl_LocalInvocationID.x + j];
            float b = m_inputOutputData[inputOffset + gl_LocalInvocationID.x + j];
            partialSum += a * b;
        }
        if (gl_LocalInvocationID.x < residualPasses)
        {
            float a = m_weightsAndBias[stride + roundedGroupIterations + gl_LocalInvocationID.x];
            float b = m_inputOutputData[inputOffset + roundedGroupIterations + gl_LocalInvocationID.x];
            partialSum += a * b;
        }
        reductionBuffer[gl_LocalInvocationID.x] = 0.0f;
        memoryBarrierShared(); 
        barrier();

        for (uint j = WORKGROUP_SIZE / 2; j > 0; j = j >> 1)
        {
            if ((gl_LocalInvocationID.x >= j) && (gl_LocalInvocationID.x < j * 2))
            {
                reductionBuffer[gl_LocalInvocationID.x - j] = partialSum;
            }
            memoryBarrierShared();
            barrier();
            partialSum += reductionBuffer[gl_LocalInvocationID.x];
        }
        if (gl_LocalInvocationID.x == 0)
        {
            partialSum += m_weightsAndBias[biasOffset + i];
            m_inputOutputData[outputOffset + i] = partialSum;
        }
    }
}