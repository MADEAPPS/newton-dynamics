/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE 128
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform param
{
    int m_matrixRows;
    int m_matrixColumns;
    int m_matrixRowsStride;
    int m_matrixColumnsStride;
    int m_workGroupsPerMatrix;

    int m_paramStart;
    int m_inputStart;
    int m_outputStart;
    int m_workBufferSize;
 };

layout(std430, binding = 1) buffer inputOutputBuffer
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) readonly buffer newralNetParameters
{
    float m_weightsAndBias[];
};

shared float reductionBuffer [WORKGROUP_SIZE];

// perform one road colum of a matrix multiply. 
void main() 
{
    uint batch = gl_WorkGroupID.x / m_matrixRows;
    uint batchIndex = gl_WorkGroupID.x - batch * m_matrixRows;

    uint batchOffset = batch * m_workBufferSize;
    uint weightRowOffset = batchIndex * m_matrixColumnsStride;
    
    float partialSum = 0.0f;
    for (uint index = gl_LocalInvocationID.x; index < m_matrixColumns; index += gl_WorkGroupSize.x)
    {
        float a = m_inputOutputData[batchOffset + m_inputStart + index];
        float b = m_weightsAndBias[m_paramStart + weightRowOffset + index];
        partialSum += a * b;
    }
    
    // do the a binary reduction
    if (gl_LocalInvocationID.x >= WORKGROUP_SIZE / 2)
    {
        reductionBuffer[gl_LocalInvocationID.x] = partialSum;
    }
    memoryBarrierShared(); 
    barrier();
    
    for (uint i = WORKGROUP_SIZE / 2; i != 0; i = i >> 1)
    {
        if (gl_LocalInvocationID.x < i)
        {
            partialSum += reductionBuffer[i + gl_LocalInvocationID.x];
            if (gl_LocalInvocationID.x >= i>>1)
            {
                reductionBuffer[gl_LocalInvocationID.x] = partialSum;
            }
        }
        memoryBarrierShared();
        barrier();
    }

    if (gl_LocalInvocationID.x == 0)
    {
        uint biasOffset = m_paramStart + m_matrixRows * m_matrixColumnsStride;
        partialSum += m_weightsAndBias[biasOffset + batchIndex];
        m_inputOutputData[batchOffset + m_outputStart + batchIndex] = partialSum;
    }
}