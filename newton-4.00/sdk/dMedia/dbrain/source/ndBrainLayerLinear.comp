/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE 128
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform UniformBufferObject 
{
    int m_inputSize;
    int m_inputStart;
    int m_outputSize;
    int m_outputStart;
    int m_workBufferSize;

    int m_paramStart;
    int m_paramBiasStart;
    int m_paramWeightStart;
    int m_paramWeightBlockSize;
};

layout(std430, binding = 1) readonly buffer inputBuffer
{
    float m_networkParameters[];
};

layout(std430, binding = 2) buffer outputBuffer
{
    float m_workingBuffer[];
};

shared float reductionBuffer [WORKGROUP_SIZE];

// perform one road colum of a matrix multiply. 
void main() 
{
    uint batch = gl_WorkGroupID.x / m_outputSize;
    uint batchIndex = gl_WorkGroupID.x - batch * m_outputSize;

    uint batchOffset = batch * m_workBufferSize;
    uint weightRowOffset = batchIndex * m_paramWeightBlockSize;
    
    float acc = 0.0f;
    for (uint index = gl_LocalInvocationID.x; index < m_inputSize; index += gl_WorkGroupSize.x)
    {
        acc += m_networkParameters[m_paramStart + m_paramWeightStart + weightRowOffset + index] * m_workingBuffer[batchOffset + m_inputStart + index];
    }
    
    // do the a binary reduction
    reductionBuffer[gl_LocalInvocationID.x] = acc;
    memoryBarrierShared(); 
    barrier();
    
    for (uint i = WORKGROUP_SIZE / 2; i != 0; i = i >> 1)
    {
        if (gl_LocalInvocationID.x < i)
        {
            reductionBuffer[gl_LocalInvocationID.x] += reductionBuffer[i + gl_LocalInvocationID.x];
        }
        memoryBarrierShared();
        barrier();
    }

    if (gl_LocalInvocationID.x == 0)
    {
        acc = reductionBuffer[gl_LocalInvocationID.x] + m_networkParameters[m_paramStart + m_paramBiasStart + batchIndex];
        m_workingBuffer[batchOffset + m_outputStart + batchIndex] = acc;
    }
}