/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE  256
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform param
{
    uint m_inputSize;
    uint m_outputSize;
    uint m_weightsStartOffset;

    uint m_inputOutputSize;
    uint m_inputOutputStartOffset;
 };

layout(std430, binding = 1) buffer dataBuffer1
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) buffer dataBuffer2
{
    float m_weightsAndBias[];
};

shared float cachedInput [1024];
shared float cachedOutput [1024];
shared float reductionBuffer [WORKGROUP_SIZE / 2];

// a matrix time a vector by interating over each row of the matrix 
// calculating an dot product of that row time the vector and adding the bias value.
void main() 
{
    uint biasOffset = m_outputSize * m_inputSize + m_weightsStartOffset;
    uint inputOffset = gl_WorkGroupID.x * m_inputOutputSize + m_inputOutputStartOffset;
    uint outputOffset = inputOffset + m_inputSize;

    uint workGroupCount = m_inputSize / WORKGROUP_SIZE;
    uint modWorkGroupSize = workGroupCount * WORKGROUP_SIZE;
    uint reminderworkGroupSize = m_inputSize - modWorkGroupSize;
    for (uint i = 0; i < modWorkGroupSize; i += WORKGROUP_SIZE)
    {
        cachedInput[i + gl_LocalInvocationID.x] = m_inputOutputData[inputOffset + gl_LocalInvocationID.x + i];
    }
    if (gl_LocalInvocationID.x < reminderworkGroupSize)
    {
        cachedInput[modWorkGroupSize + gl_LocalInvocationID.x] = m_inputOutputData[inputOffset + modWorkGroupSize + gl_LocalInvocationID.x];
    }

    uint roundRowCount = m_outputSize / WORKGROUP_SIZE;
    uint modRowCount = roundRowCount * WORKGROUP_SIZE;
    uint reminderRowCount = m_outputSize - modRowCount;
    for (uint i = 0; i < modRowCount; i += WORKGROUP_SIZE)
    {
        cachedOutput[i + gl_LocalInvocationID.x] = m_weightsAndBias[biasOffset + gl_LocalInvocationID.x];
    }
    if (gl_LocalInvocationID.x < reminderRowCount)
    {
        cachedOutput[modRowCount + gl_LocalInvocationID.x] = m_weightsAndBias[biasOffset + modRowCount + gl_LocalInvocationID.x];
    }

    for (uint i = 0; i < m_outputSize; ++i)
    {
        float partialSum = 0.0f;
        uint rowStartOffset = m_weightsStartOffset + i * m_inputSize;
        for (uint j = 0; j < modWorkGroupSize; j += WORKGROUP_SIZE)
        {
            float b = cachedInput[gl_LocalInvocationID.x + j];
            float a = m_weightsAndBias[rowStartOffset + gl_LocalInvocationID.x + j];
            partialSum += a * b;
        }
        if (gl_LocalInvocationID.x < reminderworkGroupSize)
        {
            float b = cachedInput[modWorkGroupSize + gl_LocalInvocationID.x];
            float a = m_weightsAndBias[rowStartOffset + modWorkGroupSize + gl_LocalInvocationID.x];
            partialSum += a * b;
        }

        for (uint j = WORKGROUP_SIZE / 2; j > 0; j = j >> 1)
        {
            if ((gl_LocalInvocationID.x >= j) && (gl_LocalInvocationID.x < j * 2))
            {
                reductionBuffer[gl_LocalInvocationID.x - j] = partialSum;
            }
            memoryBarrierShared();
            barrier();
            if (gl_LocalInvocationID.x < j)
            {
                partialSum += reductionBuffer[gl_LocalInvocationID.x];
            }
        }
        if (gl_LocalInvocationID.x == 0)
        {
            cachedOutput[i] += partialSum;
        }
    }

    for (uint i = 0; i < modRowCount; i += WORKGROUP_SIZE)
    {
        m_inputOutputData[outputOffset + i + gl_LocalInvocationID.x] = cachedOutput[i + gl_LocalInvocationID.x];
    }
    if (gl_LocalInvocationID.x < reminderRowCount)
    {
        m_inputOutputData[outputOffset + modRowCount + gl_LocalInvocationID.x] = cachedOutput[modRowCount + gl_LocalInvocationID.x];
    }
}
