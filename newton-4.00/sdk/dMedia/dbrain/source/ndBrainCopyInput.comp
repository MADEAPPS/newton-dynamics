/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE 256
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform UniformBufferObject 
{
    uint m_inputSize;
    uint m_outputSize;
    uint m_weightsStartOffset;

    uint m_inputOutputSize;
    uint m_inputOutputStartOffset;
};

layout(std430, binding = 1) buffer outputBuffer
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) buffer inputOutputBuffer
{
    float m_inputBuffer[];    
};

void main() 
{
    uint srcBase = gl_WorkGroupID.x * m_inputSize;
    uint dstBase = gl_WorkGroupID.x * m_inputOutputSize + m_inputOutputStartOffset;

    uint iterations = m_inputSize / WORKGROUP_SIZE;
    uint modWorkGroupSize = iterations * WORKGROUP_SIZE;
    uint reminderworkGroupSize = m_inputSize - modWorkGroupSize;

    for (uint i = 0; i < modWorkGroupSize; i += WORKGROUP_SIZE)
    {
        float a = m_inputBuffer[srcBase + i + gl_LocalInvocationID.x];
        m_inputOutputData[dstBase + i + gl_LocalInvocationID.x] = a;
    }
    if (gl_LocalInvocationID.x < reminderworkGroupSize)
    {
        float a = m_inputBuffer[srcBase + modWorkGroupSize + gl_LocalInvocationID.x];
        m_inputOutputData[dstBase + modWorkGroupSize + gl_LocalInvocationID.x] = a;
    }
}