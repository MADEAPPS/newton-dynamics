/* Copyright (c) <2003-2022> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 450

#define WORKGROUP_SIZE 256
layout (local_size_x = WORKGROUP_SIZE) in;

layout(std140, binding = 0) uniform param
{
    uint m_inputSize;
    uint m_outputSize;
    uint m_weightsStartOffset;

    uint m_inputOutputSize;
    uint m_inputOutputStartOffset;
};

layout(std430, binding = 1) buffer dataBuffer1
{
    float m_inputOutputData[];
};

layout(std430, binding = 2) buffer dataBuffer2
{
    float m_weightsAndBias[];
};

shared float tmpInputBuffer [1024];
shared float reductionBuffer [WORKGROUP_SIZE/2];

void main() 
{
    uint iteration = m_inputSize / WORKGROUP_SIZE;
    uint modRowCount = iteration * WORKGROUP_SIZE;
    uint reminderRowCount = m_inputSize - modRowCount;

    uint inputOffset = gl_WorkGroupID.x * m_inputOutputSize + m_inputOutputStartOffset;
    uint outputOffset = inputOffset + m_inputSize;

    // save inpout to local buffer, also get the max argument
    float maxArg = -1.0e30f;
    for (uint i = 0; i < modRowCount; i += WORKGROUP_SIZE)
    {
        float inputValue = m_inputOutputData[inputOffset + i + gl_LocalInvocationID.x];
        tmpInputBuffer[i + gl_LocalInvocationID.x] = inputValue;
        maxArg = (inputValue > maxArg) ? inputValue : maxArg;
    }
    if (gl_LocalInvocationID.x < reminderRowCount)
    {
        float inputValue = m_inputOutputData[inputOffset + modRowCount + gl_LocalInvocationID.x];
        tmpInputBuffer[modRowCount + gl_LocalInvocationID.x] = inputValue;
        maxArg = (inputValue > maxArg) ? inputValue : maxArg;
    }

    for (uint j = WORKGROUP_SIZE / 2; j > 0; j = j >> 1)
    {
        if ((gl_LocalInvocationID.x >= j) && (gl_LocalInvocationID.x < j * 2))
        {
            reductionBuffer[gl_LocalInvocationID.x - j] = maxArg;
        }
        memoryBarrierShared();
        barrier();
        if (gl_LocalInvocationID.x < j)
        {
            float inputValue = reductionBuffer[gl_LocalInvocationID.x];
            maxArg = (inputValue > maxArg) ? inputValue : maxArg;
        }
    }
    if (gl_LocalInvocationID.x == 0)
    {
        reductionBuffer[0] = maxArg;
    }
    memoryBarrierShared();
    barrier();
    maxArg = reductionBuffer[0];

    float sumArg = 0.0f;
    for (uint i = 0; i < modRowCount; i += WORKGROUP_SIZE)
    {
        float inputValue = tmpInputBuffer[i + gl_LocalInvocationID.x] - maxArg;
        float outputValue = exp(inputValue);
        sumArg += outputValue;
        tmpInputBuffer[i + gl_LocalInvocationID.x] = outputValue;
    }
    if (gl_LocalInvocationID.x < reminderRowCount)
    {
        float inputValue = tmpInputBuffer[modRowCount + gl_LocalInvocationID.x] - maxArg;
        float outputValue = exp(inputValue);
        sumArg += outputValue;
        tmpInputBuffer[modRowCount + gl_LocalInvocationID.x] = outputValue;
    }

    for (uint j = WORKGROUP_SIZE / 2; j > 0; j = j >> 1)
    {
        if ((gl_LocalInvocationID.x >= j) && (gl_LocalInvocationID.x < j * 2))
        {
            reductionBuffer[gl_LocalInvocationID.x - j] = sumArg;
        }
        memoryBarrierShared();
        barrier();
        if (gl_LocalInvocationID.x < j)
        {
            float inputValue = reductionBuffer[gl_LocalInvocationID.x];
            sumArg += inputValue;
        }
    }
    if (gl_LocalInvocationID.x == 0)
    {
        reductionBuffer[0] = 1.0f / sumArg;
    }
    memoryBarrierShared();
    barrier();
    
    float invDen = reductionBuffer[0];
    for (uint i = 0; i < modRowCount; i += WORKGROUP_SIZE)
    {
        float inputValue = tmpInputBuffer[i + gl_LocalInvocationID.x];
        float outputValue = invDen * inputValue;
        m_inputOutputData[outputOffset + i + gl_LocalInvocationID.x] = outputValue;
    }
    if (gl_LocalInvocationID.x < reminderRowCount)
    {
        float inputValue = tmpInputBuffer[modRowCount + gl_LocalInvocationID.x];
        float outputValue = invDen * inputValue;
        m_inputOutputData[outputOffset + modRowCount + gl_LocalInvocationID.x] = outputValue;
    }
}