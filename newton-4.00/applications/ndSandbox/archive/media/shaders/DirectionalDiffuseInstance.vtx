/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 330

layout(location = 0) in vec3 in_position;
layout(location = 1) in vec3 in_normal;
layout(location = 2) in vec2 in_uv;
layout(location = 3) in mat4 in_matrixOffset;

uniform mat4 viewModelMatrix;
uniform mat4 projectionMatrix;
uniform vec4 directionalLightDir;

out vec2 uv;
out vec3 posit;
out vec3 normal;
out vec3 lightDir;

void main()
{	
	// rotate light to view space.
	lightDir = vec3(directionalLightDir.x, directionalLightDir.y, directionalLightDir.z);

	// calculate position
	vec4 instancePosit = in_matrixOffset * vec4(in_position, 1.0);
	posit = vec3 (viewModelMatrix * instancePosit);

	// calculate normal
	vec4 instanceNormal = in_matrixOffset * vec4(in_normal, 0.0);
	normal = vec3(viewModelMatrix * instanceNormal);

	// pass uv and position tp pixel shader
	uv = in_uv;
	gl_Position = projectionMatrix * vec4(posit, 1.0);
}