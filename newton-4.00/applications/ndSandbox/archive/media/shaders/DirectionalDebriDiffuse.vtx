/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/  

#version 330 core

layout(location = 0) in vec4 in_position;
layout(location = 1) in vec3 in_normal;
layout(location = 2) in vec2 in_uv;

uniform mat4 normalMatrix;
uniform mat4 viewModelMatrix;
uniform mat4 projectionMatrix;
uniform vec4 directionalLightDir;

out vec2 uv;
out vec3 posit;
out vec3 normal;
out vec3 lightDir;
out float materialBlend;

void main()
{	
	lightDir = vec3(directionalLightDir.x, directionalLightDir.y, directionalLightDir.z);

	materialBlend = in_position.w;
//materialBlend = 1.0f;
	posit = vec3 (viewModelMatrix * vec4(vec3(in_position), 1.0));
	normal = vec3 (normalize (normalMatrix * vec4(in_normal, 0.0)));
	uv = in_uv;

	gl_Position = projectionMatrix * vec4(posit, 1.0);
}