/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/
#version 330 core

layout(location = 0) in vec3 in_position;
layout(location = 1) in vec3 in_normal;
layout(location = 2) in vec2 in_uv;
layout(location = 3) in vec4 in_boneWeights;
layout(location = 4) in vec4 in_boneIndices;

uniform mat4 normalMatrix;
uniform mat4 viewModelMatrix;
uniform mat4 projectionMatrix;
uniform vec4 directionalLightDir;
uniform mat4 matrixPallete[128];

out vec2 uv;
out vec3 posit;
out vec3 normal;
out vec3 lightDir;

void main()
{
	lightDir = vec3(directionalLightDir.x, directionalLightDir.y, directionalLightDir.z);

	vec4 weightedNormal = vec4 (0.0, 0.0, 0.0, 0.0);	
	vec4 weightedVertex = vec4 (0.0, 0.0, 0.0, 1.0);	
	vec4 pointNormal = vec4(in_normal, 0.0);
	vec4 pointVertex = vec4(in_position, 1.0);
	for (int i = 0; i < 4; i++) 
	{
		int matrixIndex = int (in_boneIndices[i]);
		weightedVertex += matrixPallete[matrixIndex] * pointVertex * in_boneWeights[i];
		weightedNormal += matrixPallete[matrixIndex] * pointNormal * in_boneWeights[i];
	}
	weightedVertex.w = 1.0;
	weightedNormal = normalize (weightedNormal);

	normal = vec3 (normalMatrix * weightedNormal);
	posit = vec3 (viewModelMatrix * weightedVertex);

	uv = in_uv;
	gl_Position = projectionMatrix * vec4(posit, 1.0);
} 

