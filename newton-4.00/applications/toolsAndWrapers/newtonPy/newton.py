# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _newton
else:
    import _newton

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def dGetWorkingFileName(name, outPathName):
    return _newton.dGetWorkingFileName(name, outPathName)

def ndGetZeroMatrix():
    return _newton.ndGetZeroMatrix()

def ndGetIdentityMatrix():
    return _newton.ndGetIdentityMatrix()

def ndYawMatrix(ang):
    return _newton.ndYawMatrix(ang)

def ndRollMatrix(ang):
    return _newton.ndRollMatrix(ang)

def ndPitchMatrix(ang):
    return _newton.ndPitchMatrix(ang)

def ndGramSchmidtMatrix(dir):
    return _newton.ndGramSchmidtMatrix(dir)

def ndCovarianceMatrix(p, q):
    return _newton.ndCovarianceMatrix(p, q)

def ndCalculateMatrix(rotation, position):
    return _newton.ndCalculateMatrix(rotation, position)
class ndMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _newton.delete_ndMatrix

    def Inverse(self):
        return _newton.ndMatrix_Inverse(self)

    def OrthoInverse(self):
        return _newton.ndMatrix_OrthoInverse(self)

    def Transpose3x3(self):
        return _newton.ndMatrix_Transpose3x3(self)

    def Transpose4X4(self):
        return _newton.ndMatrix_Transpose4X4(self)

    def RotateVector(self, v):
        return _newton.ndMatrix_RotateVector(self, v)

    def UnrotateVector(self, v):
        return _newton.ndMatrix_UnrotateVector(self, v)

    def TransformVector(self, v):
        return _newton.ndMatrix_TransformVector(self, v)

    def UntransformVector(self, v):
        return _newton.ndMatrix_UntransformVector(self, v)

    def TransformVector1x4(self, v):
        return _newton.ndMatrix_TransformVector1x4(self, v)

    def TransformPlane(self, localPlane):
        return _newton.ndMatrix_TransformPlane(self, localPlane)

    def UntransformPlane(self, globalPlane):
        return _newton.ndMatrix_UntransformPlane(self, globalPlane)

    def Inverse4x4(self):
        return _newton.ndMatrix_Inverse4x4(self)

    def SolveByGaussianElimination(self, v):
        return _newton.ndMatrix_SolveByGaussianElimination(self, v)

    def TransformBBox(self, p0local, p1local, p0, p1):
        return _newton.ndMatrix_TransformBBox(self, p0local, p1local, p0, p1)

    def CalcPitchYawRoll(self, euler):
        return _newton.ndMatrix_CalcPitchYawRoll(self, euler)

    def TransformTriplex(self, *args):
        return _newton.ndMatrix_TransformTriplex(self, *args)

    def TestIdentity(self):
        return _newton.ndMatrix_TestIdentity(self)

    def TestSymetric3x3(self):
        return _newton.ndMatrix_TestSymetric3x3(self)

    def TestOrthogonal(self, *args):
        return _newton.ndMatrix_TestOrthogonal(self, *args)

    def Multiply3X3(self, B):
        return _newton.ndMatrix_Multiply3X3(self, B)

    def __mul__(self, B):
        return _newton.ndMatrix___mul__(self, B)

    def EigenVectors(self):
        return _newton.ndMatrix_EigenVectors(self)

    def PolarDecomposition(self, transformMatrix, scale, stretchAxis):
        return _newton.ndMatrix_PolarDecomposition(self, transformMatrix, scale, stretchAxis)

    def __init__(self, *args):
        _newton.ndMatrix_swiginit(self, _newton.new_ndMatrix(*args))
    m_front = property(_newton.ndMatrix_m_front_get, _newton.ndMatrix_m_front_set)
    m_up = property(_newton.ndMatrix_m_up_get, _newton.ndMatrix_m_up_set)
    m_right = property(_newton.ndMatrix_m_right_get, _newton.ndMatrix_m_right_set)
    m_posit = property(_newton.ndMatrix_m_posit_get, _newton.ndMatrix_m_posit_set)

# Register ndMatrix in _newton:
_newton.ndMatrix_swigregister(ndMatrix)

class ndQuaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newton.ndQuaternion_swiginit(self, _newton.new_ndQuaternion(*args))

    def Normalize(self):
        return _newton.ndQuaternion_Normalize(self)

    def Scale(self, scale):
        return _newton.ndQuaternion_Scale(self, scale)

    def Inverse(self):
        return _newton.ndQuaternion_Inverse(self)

    def __add__(self, B):
        return _newton.ndQuaternion___add__(self, B)

    def __sub__(self, B):
        return _newton.ndQuaternion___sub__(self, B)

    def __mul__(self, B):
        return _newton.ndQuaternion___mul__(self, B)

    def Slerp(self, q1, t):
        return _newton.ndQuaternion_Slerp(self, q1, t)

    def CalcAverageOmega(self, q1, invdt):
        return _newton.ndQuaternion_CalcAverageOmega(self, q1, invdt)
    __swig_destroy__ = _newton.delete_ndQuaternion

# Register ndQuaternion in _newton:
_newton.ndQuaternion_swigregister(ndQuaternion)

m_box = _newton.m_box
m_cone = _newton.m_cone
m_sphere = _newton.m_sphere
m_capsule = _newton.m_capsule
m_cylinder = _newton.m_cylinder
m_chamferCylinder = _newton.m_chamferCylinder
m_convexHull = _newton.m_convexHull
m_compound = _newton.m_compound
m_staticMesh = _newton.m_staticMesh
m_heightField = _newton.m_heightField
m_staticProceduralMesh = _newton.m_staticProceduralMesh
m_nullCollision = _newton.m_nullCollision
m_pointCollision = _newton.m_pointCollision
m_polygonCollision = _newton.m_polygonCollision
m_boundingBoxHierachy = _newton.m_boundingBoxHierachy
class ndShapeMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndShapeMaterial_swiginit(self, _newton.new_ndShapeMaterial())
    m_userId = property(_newton.ndShapeMaterial_m_userId_get, _newton.ndShapeMaterial_m_userId_set)
    m_data = property(_newton.ndShapeMaterial_m_data_get, _newton.ndShapeMaterial_m_data_set)
    m_userParam = property(_newton.ndShapeMaterial_m_userParam_get, _newton.ndShapeMaterial_m_userParam_set)
    __swig_destroy__ = _newton.delete_ndShapeMaterial

# Register ndShapeMaterial in _newton:
_newton.ndShapeMaterial_swigregister(ndShapeMaterial)

class ndBoxInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_newton.ndBoxInfo_m_x_get, _newton.ndBoxInfo_m_x_set)
    m_y = property(_newton.ndBoxInfo_m_y_get, _newton.ndBoxInfo_m_y_set)
    m_z = property(_newton.ndBoxInfo_m_z_get, _newton.ndBoxInfo_m_z_set)

    def __init__(self):
        _newton.ndBoxInfo_swiginit(self, _newton.new_ndBoxInfo())
    __swig_destroy__ = _newton.delete_ndBoxInfo

# Register ndBoxInfo in _newton:
_newton.ndBoxInfo_swigregister(ndBoxInfo)

class ndPointInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndPointInfo_m_noUsed_get, _newton.ndPointInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndPointInfo_swiginit(self, _newton.new_ndPointInfo())
    __swig_destroy__ = _newton.delete_ndPointInfo

# Register ndPointInfo in _newton:
_newton.ndPointInfo_swigregister(ndPointInfo)

class ndSphereInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newton.ndSphereInfo_m_radius_get, _newton.ndSphereInfo_m_radius_set)

    def __init__(self):
        _newton.ndSphereInfo_swiginit(self, _newton.new_ndSphereInfo())
    __swig_destroy__ = _newton.delete_ndSphereInfo

# Register ndSphereInfo in _newton:
_newton.ndSphereInfo_swigregister(ndSphereInfo)

class ndCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newton.ndCylinderInfo_m_radio0_get, _newton.ndCylinderInfo_m_radio0_set)
    m_radio1 = property(_newton.ndCylinderInfo_m_radio1_get, _newton.ndCylinderInfo_m_radio1_set)
    m_height = property(_newton.ndCylinderInfo_m_height_get, _newton.ndCylinderInfo_m_height_set)

    def __init__(self):
        _newton.ndCylinderInfo_swiginit(self, _newton.new_ndCylinderInfo())
    __swig_destroy__ = _newton.delete_ndCylinderInfo

# Register ndCylinderInfo in _newton:
_newton.ndCylinderInfo_swigregister(ndCylinderInfo)

class ndCapsuleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newton.ndCapsuleInfo_m_radio0_get, _newton.ndCapsuleInfo_m_radio0_set)
    m_radio1 = property(_newton.ndCapsuleInfo_m_radio1_get, _newton.ndCapsuleInfo_m_radio1_set)
    m_height = property(_newton.ndCapsuleInfo_m_height_get, _newton.ndCapsuleInfo_m_height_set)

    def __init__(self):
        _newton.ndCapsuleInfo_swiginit(self, _newton.new_ndCapsuleInfo())
    __swig_destroy__ = _newton.delete_ndCapsuleInfo

# Register ndCapsuleInfo in _newton:
_newton.ndCapsuleInfo_swigregister(ndCapsuleInfo)

class ndConeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newton.ndConeInfo_m_radius_get, _newton.ndConeInfo_m_radius_set)
    m_height = property(_newton.ndConeInfo_m_height_get, _newton.ndConeInfo_m_height_set)

    def __init__(self):
        _newton.ndConeInfo_swiginit(self, _newton.new_ndConeInfo())
    __swig_destroy__ = _newton.delete_ndConeInfo

# Register ndConeInfo in _newton:
_newton.ndConeInfo_swigregister(ndConeInfo)

class ndChamferCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_r = property(_newton.ndChamferCylinderInfo_m_r_get, _newton.ndChamferCylinderInfo_m_r_set)
    m_height = property(_newton.ndChamferCylinderInfo_m_height_get, _newton.ndChamferCylinderInfo_m_height_set)

    def __init__(self):
        _newton.ndChamferCylinderInfo_swiginit(self, _newton.new_ndChamferCylinderInfo())
    __swig_destroy__ = _newton.delete_ndChamferCylinderInfo

# Register ndChamferCylinderInfo in _newton:
_newton.ndChamferCylinderInfo_swigregister(ndChamferCylinderInfo)

class ndConvexHullInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newton.ndConvexHullInfo_m_vertexCount_get, _newton.ndConvexHullInfo_m_vertexCount_set)
    m_strideInBytes = property(_newton.ndConvexHullInfo_m_strideInBytes_get, _newton.ndConvexHullInfo_m_strideInBytes_set)
    m_faceCount = property(_newton.ndConvexHullInfo_m_faceCount_get, _newton.ndConvexHullInfo_m_faceCount_set)
    m_vertex = property(_newton.ndConvexHullInfo_m_vertex_get, _newton.ndConvexHullInfo_m_vertex_set)

    def __init__(self):
        _newton.ndConvexHullInfo_swiginit(self, _newton.new_ndConvexHullInfo())
    __swig_destroy__ = _newton.delete_ndConvexHullInfo

# Register ndConvexHullInfo in _newton:
_newton.ndConvexHullInfo_swigregister(ndConvexHullInfo)

class ndCompoundInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndCompoundInfo_m_noUsed_get, _newton.ndCompoundInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndCompoundInfo_swiginit(self, _newton.new_ndCompoundInfo())
    __swig_destroy__ = _newton.delete_ndCompoundInfo

# Register ndCompoundInfo in _newton:
_newton.ndCompoundInfo_swigregister(ndCompoundInfo)

class ndProceduralInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndProceduralInfo_m_noUsed_get, _newton.ndProceduralInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndProceduralInfo_swiginit(self, _newton.new_ndProceduralInfo())
    __swig_destroy__ = _newton.delete_ndProceduralInfo

# Register ndProceduralInfo in _newton:
_newton.ndProceduralInfo_swigregister(ndProceduralInfo)

class ndCollisionBvhInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newton.ndCollisionBvhInfo_m_vertexCount_get, _newton.ndCollisionBvhInfo_m_vertexCount_set)
    m_indexCount = property(_newton.ndCollisionBvhInfo_m_indexCount_get, _newton.ndCollisionBvhInfo_m_indexCount_set)

    def __init__(self):
        _newton.ndCollisionBvhInfo_swiginit(self, _newton.new_ndCollisionBvhInfo())
    __swig_destroy__ = _newton.delete_ndCollisionBvhInfo

# Register ndCollisionBvhInfo in _newton:
_newton.ndCollisionBvhInfo_swigregister(ndCollisionBvhInfo)

class ndHeighfieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_width = property(_newton.ndHeighfieldInfo_m_width_get, _newton.ndHeighfieldInfo_m_width_set)
    m_height = property(_newton.ndHeighfieldInfo_m_height_get, _newton.ndHeighfieldInfo_m_height_set)
    m_gridsDiagonals = property(_newton.ndHeighfieldInfo_m_gridsDiagonals_get, _newton.ndHeighfieldInfo_m_gridsDiagonals_set)
    m_verticalScale = property(_newton.ndHeighfieldInfo_m_verticalScale_get, _newton.ndHeighfieldInfo_m_verticalScale_set)
    m_horizonalScale_x = property(_newton.ndHeighfieldInfo_m_horizonalScale_x_get, _newton.ndHeighfieldInfo_m_horizonalScale_x_set)
    m_horizonalScale_z = property(_newton.ndHeighfieldInfo_m_horizonalScale_z_get, _newton.ndHeighfieldInfo_m_horizonalScale_z_set)
    m_elevation = property(_newton.ndHeighfieldInfo_m_elevation_get, _newton.ndHeighfieldInfo_m_elevation_set)
    m_atributes = property(_newton.ndHeighfieldInfo_m_atributes_get, _newton.ndHeighfieldInfo_m_atributes_set)

    def __init__(self):
        _newton.ndHeighfieldInfo_swiginit(self, _newton.new_ndHeighfieldInfo())
    __swig_destroy__ = _newton.delete_ndHeighfieldInfo

# Register ndHeighfieldInfo in _newton:
_newton.ndHeighfieldInfo_swigregister(ndHeighfieldInfo)

class ndShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndShapeInfo_swiginit(self, _newton.new_ndShapeInfo())

    def GetHash(self, hash):
        return _newton.ndShapeInfo_GetHash(self, hash)
    m_offsetMatrix = property(_newton.ndShapeInfo_m_offsetMatrix_get, _newton.ndShapeInfo_m_offsetMatrix_set)
    m_scale = property(_newton.ndShapeInfo_m_scale_get, _newton.ndShapeInfo_m_scale_set)
    m_shapeMaterial = property(_newton.ndShapeInfo_m_shapeMaterial_get, _newton.ndShapeInfo_m_shapeMaterial_set)
    m_collisionType = property(_newton.ndShapeInfo_m_collisionType_get, _newton.ndShapeInfo_m_collisionType_set)
    __swig_destroy__ = _newton.delete_ndShapeInfo

# Register ndShapeInfo in _newton:
_newton.ndShapeInfo_swigregister(ndShapeInfo)

class ndShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _newton.delete_ndShape

    def GetRefCount(self):
        return _newton.ndShape_GetRefCount(self)

    def Release(self):
        return _newton.ndShape_Release(self)

    def AddRef(self):
        return _newton.ndShape_AddRef(self)

    def GetAsShapeBox(self):
        return _newton.ndShape_GetAsShapeBox(self)

    def GetAsShapeNull(self):
        return _newton.ndShape_GetAsShapeNull(self)

    def GetAsShapeCone(self):
        return _newton.ndShape_GetAsShapeCone(self)

    def GetAsShapePoint(self):
        return _newton.ndShape_GetAsShapePoint(self)

    def GetAsShapeConvex(self):
        return _newton.ndShape_GetAsShapeConvex(self)

    def GetAsShapeSphere(self):
        return _newton.ndShape_GetAsShapeSphere(self)

    def GetAsShapeCapsule(self):
        return _newton.ndShape_GetAsShapeCapsule(self)

    def GetAsShapeCylinder(self):
        return _newton.ndShape_GetAsShapeCylinder(self)

    def GetAsShapeCompound(self):
        return _newton.ndShape_GetAsShapeCompound(self)

    def GetAsShapeStaticBVH(self):
        return _newton.ndShape_GetAsShapeStaticBVH(self)

    def GetAsShapeStaticMesh(self):
        return _newton.ndShape_GetAsShapeStaticMesh(self)

    def GetAsShapeHeightfield(self):
        return _newton.ndShape_GetAsShapeHeightfield(self)

    def GetAsShapeConvexPolygon(self):
        return _newton.ndShape_GetAsShapeConvexPolygon(self)

    def GetAsShapeChamferCylinder(self):
        return _newton.ndShape_GetAsShapeChamferCylinder(self)

    def GetAsShapeStaticProceduralMesh(self):
        return _newton.ndShape_GetAsShapeStaticProceduralMesh(self)

    def GetConvexVertexCount(self):
        return _newton.ndShape_GetConvexVertexCount(self)

    def GetObbSize(self):
        return _newton.ndShape_GetObbSize(self)

    def GetObbOrigin(self):
        return _newton.ndShape_GetObbOrigin(self)

    def GetUmbraClipSize(self):
        return _newton.ndShape_GetUmbraClipSize(self)

    def MassProperties(self):
        return _newton.ndShape_MassProperties(self)

    def DebugShape(self, matrix, debugCallback):
        return _newton.ndShape_DebugShape(self, matrix, debugCallback)

    def GetShapeInfo(self):
        return _newton.ndShape_GetShapeInfo(self)

    def GetVolume(self):
        return _newton.ndShape_GetVolume(self)

    def GetBoxMinRadius(self):
        return _newton.ndShape_GetBoxMinRadius(self)

    def GetBoxMaxRadius(self):
        return _newton.ndShape_GetBoxMaxRadius(self)

    def GetHash(self, hash=0):
        return _newton.ndShape_GetHash(self, hash)

    def CalculateAabb(self, matrix, p0, p1):
        return _newton.ndShape_CalculateAabb(self, matrix, p0, p1)

    def SupportVertex(self, dir, vertexIndex):
        return _newton.ndShape_SupportVertex(self, dir, vertexIndex)

    def SupportVertexSpecialProjectPoint(self, point, dir):
        return _newton.ndShape_SupportVertexSpecialProjectPoint(self, point, dir)

    def SupportVertexSpecial(self, dir, skinMargin, vertexIndex):
        return _newton.ndShape_SupportVertexSpecial(self, dir, skinMargin, vertexIndex)

    def CalculatePlaneIntersection(self, normal, point, contactsOut):
        return _newton.ndShape_CalculatePlaneIntersection(self, normal, point, contactsOut)

    def CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale):
        return _newton.ndShape_CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale)

    def RayCast(self, callback, localP0, localP1, maxT, body, contactOut):
        return _newton.ndShape_RayCast(self, callback, localP0, localP1, maxT, body, contactOut)

    def CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix):
        return _newton.ndShape_CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix)

    def CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass):
        return _newton.ndShape_CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass)

# Register ndShape in _newton:
_newton.ndShape_swigregister(ndShape)

class ndShapeBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size_x, size_y, size_z):
        _newton.ndShapeBox_swiginit(self, _newton.new_ndShapeBox(size_x, size_y, size_z))
    __swig_destroy__ = _newton.delete_ndShapeBox

    def GetAsShapeBox(self):
        return _newton.ndShapeBox_GetAsShapeBox(self)

# Register ndShapeBox in _newton:
_newton.ndShapeBox_swigregister(ndShapeBox)

D_CONE_SEGMENTS = _newton.D_CONE_SEGMENTS
class ndShapeCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radio, height):
        _newton.ndShapeCone_swiginit(self, _newton.new_ndShapeCone(radio, height))
    __swig_destroy__ = _newton.delete_ndShapeCone

    def GetAsShapeCone(self):
        return _newton.ndShapeCone_GetAsShapeCone(self)

# Register ndShapeCone in _newton:
_newton.ndShapeCone_swigregister(ndShapeCone)

D_CLIP_MAX_COUNT = _newton.D_CLIP_MAX_COUNT
D_CLIP_MAX_POINT_COUNT = _newton.D_CLIP_MAX_POINT_COUNT
class ndShapeConvex(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register ndShapeConvex in _newton:
_newton.ndShapeConvex_swigregister(ndShapeConvex)

D_SPHERE_VERTEX_COUNT = _newton.D_SPHERE_VERTEX_COUNT
class ndShapeSphere(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius):
        _newton.ndShapeSphere_swiginit(self, _newton.new_ndShapeSphere(radius))
    __swig_destroy__ = _newton.delete_ndShapeSphere

    def GetAsShapeSphere(self):
        return _newton.ndShapeSphere_GetAsShapeSphere(self)

# Register ndShapeSphere in _newton:
_newton.ndShapeSphere_swigregister(ndShapeSphere)

class ndShapeCapsule(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radio0, radio1, height):
        _newton.ndShapeCapsule_swiginit(self, _newton.new_ndShapeCapsule(radio0, radio1, height))

    def GetAsShapeCapsule(self):
        return _newton.ndShapeCapsule_GetAsShapeCapsule(self)
    __swig_destroy__ = _newton.delete_ndShapeCapsule

# Register ndShapeCapsule in _newton:
_newton.ndShapeCapsule_swigregister(ndShapeCapsule)

D_COMPOUND_STACK_DEPTH = _newton.D_COMPOUND_STACK_DEPTH
class ndShapeCompound(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_leaf = _newton.ndShapeCompound_m_leaf
    m_node = _newton.ndShapeCompound_m_node

    def __init__(self):
        _newton.ndShapeCompound_swiginit(self, _newton.new_ndShapeCompound())
    __swig_destroy__ = _newton.delete_ndShapeCompound

    def SetOwner(self, myInstance):
        return _newton.ndShapeCompound_SetOwner(self, myInstance)

    def GetTree(self):
        return _newton.ndShapeCompound_GetTree(self)

    def GetHash(self, hash):
        return _newton.ndShapeCompound_GetHash(self, hash)

    def BeginAddRemove(self):
        return _newton.ndShapeCompound_BeginAddRemove(self)

    def RemoveNode(self, node):
        return _newton.ndShapeCompound_RemoveNode(self, node)

    def AddCollision(self, part):
        return _newton.ndShapeCompound_AddCollision(self, part)

    def GetShapeInstance(self, node):
        return _newton.ndShapeCompound_GetShapeInstance(self, node)

    def EndAddRemove(self):
        return _newton.ndShapeCompound_EndAddRemove(self)

# Register ndShapeCompound in _newton:
_newton.ndShapeCompound_swigregister(ndShapeCompound)

D_TAPED_CYLINDER_SEGMENTS = _newton.D_TAPED_CYLINDER_SEGMENTS
class ndShapeCylinder(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radio0, radio1, height):
        _newton.ndShapeCylinder_swiginit(self, _newton.new_ndShapeCylinder(radio0, radio1, height))
    __swig_destroy__ = _newton.delete_ndShapeCylinder

    def GetAsShapeCylinder(self):
        return _newton.ndShapeCylinder_GetAsShapeCylinder(self)

# Register ndShapeCylinder in _newton:
_newton.ndShapeCylinder_swigregister(ndShapeCylinder)

class ndShapeStatic_bvh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newton.ndShapeStatic_bvh_swiginit(self, _newton.new_ndShapeStatic_bvh(*args))
    __swig_destroy__ = _newton.delete_ndShapeStatic_bvh

    def Create(self, size):
        return _newton.ndShapeStatic_bvh_Create(self, size)

    def Destroy(self, ptr):
        return _newton.ndShapeStatic_bvh_Destroy(self, ptr)

# Register ndShapeStatic_bvh in _newton:
_newton.ndShapeStatic_bvh_swigregister(ndShapeStatic_bvh)

class ndShapeStaticMesh(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        _newton.ndShapeStaticMesh_swiginit(self, _newton.new_ndShapeStaticMesh(id))
    __swig_destroy__ = _newton.delete_ndShapeStaticMesh

    def DebugShape(self, matrix, debugCallback):
        return _newton.ndShapeStaticMesh_DebugShape(self, matrix, debugCallback)

    def RayCast(self, callback, localP0, localP1, maxT, body, contactOut):
        return _newton.ndShapeStaticMesh_RayCast(self, callback, localP0, localP1, maxT, body, contactOut)

    def GetCollidingFaces(self, data):
        return _newton.ndShapeStaticMesh_GetCollidingFaces(self, data)

# Register ndShapeStaticMesh in _newton:
_newton.ndShapeStaticMesh_swigregister(ndShapeStaticMesh)

class ndShapeConvexHull(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, count, strideInBytes, tolerance, vertexArray, maxPointsOut=0x7fffffff):
        _newton.ndShapeConvexHull_swiginit(self, _newton.new_ndShapeConvexHull(count, strideInBytes, tolerance, vertexArray, maxPointsOut))
    __swig_destroy__ = _newton.delete_ndShapeConvexHull

# Register ndShapeConvexHull in _newton:
_newton.ndShapeConvexHull_swigregister(ndShapeConvexHull)

class ndShapeHeightfield(ndShapeStaticMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_normalDiagonals = _newton.ndShapeHeightfield_m_normalDiagonals
    m_invertedDiagonals = _newton.ndShapeHeightfield_m_invertedDiagonals

    def __init__(self, width, height, constructionMode, horizontalScale_x, horizontalScale_z):
        _newton.ndShapeHeightfield_swiginit(self, _newton.new_ndShapeHeightfield(width, height, constructionMode, horizontalScale_x, horizontalScale_z))
    __swig_destroy__ = _newton.delete_ndShapeHeightfield

    def GetElevationMap(self, *args):
        return _newton.ndShapeHeightfield_GetElevationMap(self, *args)

    def UpdateElevationMapAabb(self):
        return _newton.ndShapeHeightfield_UpdateElevationMapAabb(self)

    def GetLocalAabb(self, p0, p1, boxP0, boxP1):
        return _newton.ndShapeHeightfield_GetLocalAabb(self, p0, p1, boxP0, boxP1)

# Register ndShapeHeightfield in _newton:
_newton.ndShapeHeightfield_swigregister(ndShapeHeightfield)

DG_CHAMFERCYLINDER_SLICES = _newton.DG_CHAMFERCYLINDER_SLICES
DG_CHAMFERCYLINDER_BRAKES = _newton.DG_CHAMFERCYLINDER_BRAKES
DG_MAX_CHAMFERCYLINDER_DIR_COUNT = _newton.DG_MAX_CHAMFERCYLINDER_DIR_COUNT
class ndShapeChamferCylinder(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        _newton.ndShapeChamferCylinder_swiginit(self, _newton.new_ndShapeChamferCylinder(radius, height))
    __swig_destroy__ = _newton.delete_ndShapeChamferCylinder

    def GetAsShapeChamferCylinder(self):
        return _newton.ndShapeChamferCylinder_GetAsShapeChamferCylinder(self)

# Register ndShapeChamferCylinder in _newton:
_newton.ndShapeChamferCylinder_swigregister(ndShapeChamferCylinder)

class ndShapeDebugNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    m_shared = _newton.ndShapeDebugNotify_m_shared
    m_open = _newton.ndShapeDebugNotify_m_open
    __swig_destroy__ = _newton.delete_ndShapeDebugNotify

    def DrawPolygon(self, vertexCount, faceArray, edgeType):
        return _newton.ndShapeDebugNotify_DrawPolygon(self, vertexCount, faceArray, edgeType)
    m_instance = property(_newton.ndShapeDebugNotify_m_instance_get, _newton.ndShapeDebugNotify_m_instance_set)

# Register ndShapeDebugNotify in _newton:
_newton.ndShapeDebugNotify_swigregister(ndShapeDebugNotify)

class ndShapeInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_unit = _newton.ndShapeInstance_m_unit
    m_uniform = _newton.ndShapeInstance_m_uniform
    m_nonUniform = _newton.ndShapeInstance_m_nonUniform
    m_global = _newton.ndShapeInstance_m_global

    def __init__(self, *args):
        _newton.ndShapeInstance_swiginit(self, _newton.new_ndShapeInstance(*args))
    __swig_destroy__ = _newton.delete_ndShapeInstance

    def Assigment(self, src):
        return _newton.ndShapeInstance_Assigment(self, src)

    def CalculateInertia(self):
        return _newton.ndShapeInstance_CalculateInertia(self)

    def CalculateObb(self, origin, size):
        return _newton.ndShapeInstance_CalculateObb(self, origin, size)

    def CalculateAabb(self, matrix, minP, maxP):
        return _newton.ndShapeInstance_CalculateAabb(self, matrix, minP, maxP)

    def DebugShape(self, matrix, debugCallback):
        return _newton.ndShapeInstance_DebugShape(self, matrix, debugCallback)

    def RayCast(self, callback, localP0, localP1, body, contactOut):
        return _newton.ndShapeInstance_RayCast(self, callback, localP0, localP1, body, contactOut)

    def GetShapeInfo(self):
        return _newton.ndShapeInstance_GetShapeInfo(self)

    def CalculateBuoyancyCenterOfPresure(self, com, matrix, fluidPlane):
        return _newton.ndShapeInstance_CalculateBuoyancyCenterOfPresure(self, com, matrix, fluidPlane)

    @staticmethod
    def GetBoxPadding():
        return _newton.ndShapeInstance_GetBoxPadding()

    def SavePLY(self, fileName):
        return _newton.ndShapeInstance_SavePLY(self, fileName)

    def ClassName(self):
        return _newton.ndShapeInstance_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShapeInstance_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShapeInstance_SuperClassName(self)

    def GetShape(self, *args):
        return _newton.ndShapeInstance_GetShape(self, *args)

    def SetShape(self, shape):
        return _newton.ndShapeInstance_SetShape(self, shape)

    def SupportVertex(self, dir):
        return _newton.ndShapeInstance_SupportVertex(self, dir)

    def GetScaledTransform(self, matrix):
        return _newton.ndShapeInstance_GetScaledTransform(self, matrix)

    def SupportVertexSpecial(self, dir, vertexIndex):
        return _newton.ndShapeInstance_SupportVertexSpecial(self, dir, vertexIndex)

    def SupportVertexSpecialProjectPoint(self, point, dir):
        return _newton.ndShapeInstance_SupportVertexSpecialProjectPoint(self, point, dir)

    def GetLocalMatrix(self):
        return _newton.ndShapeInstance_GetLocalMatrix(self)

    def SetLocalMatrix(self, matrix):
        return _newton.ndShapeInstance_SetLocalMatrix(self, matrix)

    def GetGlobalMatrix(self):
        return _newton.ndShapeInstance_GetGlobalMatrix(self)

    def SetGlobalMatrix(self, scale):
        return _newton.ndShapeInstance_SetGlobalMatrix(self, scale)

    def GetCollisionMode(self):
        return _newton.ndShapeInstance_GetCollisionMode(self)

    def SetCollisionMode(self, mode):
        return _newton.ndShapeInstance_SetCollisionMode(self, mode)

    def GetConvexVertexCount(self):
        return _newton.ndShapeInstance_GetConvexVertexCount(self)

    def GetMaterial(self):
        return _newton.ndShapeInstance_GetMaterial(self)

    def SetMaterial(self, material):
        return _newton.ndShapeInstance_SetMaterial(self, material)

    def GetScale(self):
        return _newton.ndShapeInstance_GetScale(self)

    def GetInvScale(self):
        return _newton.ndShapeInstance_GetInvScale(self)

    def GetAlignmentMatrix(self):
        return _newton.ndShapeInstance_GetAlignmentMatrix(self)

    def SetScale(self, scale):
        return _newton.ndShapeInstance_SetScale(self, scale)

    def SetGlobalScale(self, *args):
        return _newton.ndShapeInstance_SetGlobalScale(self, *args)

    def CalculatePlaneIntersection(self, normal, point, contactsOut):
        return _newton.ndShapeInstance_CalculatePlaneIntersection(self, normal, point, contactsOut)

    def GetVolume(self):
        return _newton.ndShapeInstance_GetVolume(self)

    def GetBoxMinRadius(self):
        return _newton.ndShapeInstance_GetBoxMinRadius(self)

    def GetBoxMaxRadius(self):
        return _newton.ndShapeInstance_GetBoxMaxRadius(self)

    def GetScaleType(self):
        return _newton.ndShapeInstance_GetScaleType(self)

    def GetUmbraClipSize(self):
        return _newton.ndShapeInstance_GetUmbraClipSize(self)

    def GetUserDataID(self):
        return _newton.ndShapeInstance_GetUserDataID(self)
    m_globalMatrix = property(_newton.ndShapeInstance_m_globalMatrix_get, _newton.ndShapeInstance_m_globalMatrix_set)
    m_localMatrix = property(_newton.ndShapeInstance_m_localMatrix_get, _newton.ndShapeInstance_m_localMatrix_set)
    m_alignmentMatrix = property(_newton.ndShapeInstance_m_alignmentMatrix_get, _newton.ndShapeInstance_m_alignmentMatrix_set)
    m_scale = property(_newton.ndShapeInstance_m_scale_get, _newton.ndShapeInstance_m_scale_set)
    m_invScale = property(_newton.ndShapeInstance_m_invScale_get, _newton.ndShapeInstance_m_invScale_set)
    m_maxScale = property(_newton.ndShapeInstance_m_maxScale_get, _newton.ndShapeInstance_m_maxScale_set)
    m_shapeMaterial = property(_newton.ndShapeInstance_m_shapeMaterial_get, _newton.ndShapeInstance_m_shapeMaterial_set)
    m_shape = property(_newton.ndShapeInstance_m_shape_get, _newton.ndShapeInstance_m_shape_set)
    m_ownerBody = property(_newton.ndShapeInstance_m_ownerBody_get, _newton.ndShapeInstance_m_ownerBody_set)
    m_subCollisionHandle = property(_newton.ndShapeInstance_m_subCollisionHandle_get, _newton.ndShapeInstance_m_subCollisionHandle_set)
    m_parent = property(_newton.ndShapeInstance_m_parent_get, _newton.ndShapeInstance_m_parent_set)
    m_skinMargin = property(_newton.ndShapeInstance_m_skinMargin_get, _newton.ndShapeInstance_m_skinMargin_set)
    m_scaleType = property(_newton.ndShapeInstance_m_scaleType_get, _newton.ndShapeInstance_m_scaleType_set)
    m_collisionMode = property(_newton.ndShapeInstance_m_collisionMode_get, _newton.ndShapeInstance_m_collisionMode_set)

# Register ndShapeInstance in _newton:
_newton.ndShapeInstance_swigregister(ndShapeInstance)

def ndShapeInstance_GetBoxPadding():
    return _newton.ndShapeInstance_GetBoxPadding()

def ndShapeInstance_StaticClassName():
    return _newton.ndShapeInstance_StaticClassName()

class ndBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _newton.delete_ndBody

    def GetAsBody(self):
        return _newton.ndBody_GetAsBody(self)

    def GetAsBodyDynamic(self):
        return _newton.ndBody_GetAsBodyDynamic(self)

    def GetAsBodySentinel(self):
        return _newton.ndBody_GetAsBodySentinel(self)

    def GetAsBodySphFluid(self):
        return _newton.ndBody_GetAsBodySphFluid(self)

    def GetAsBodyKinematic(self):
        return _newton.ndBody_GetAsBodyKinematic(self)

    def GetAsBodyParticleSet(self):
        return _newton.ndBody_GetAsBodyParticleSet(self)

    def GetAsBodyPlayerCapsule(self):
        return _newton.ndBody_GetAsBodyPlayerCapsule(self)

    def GetAsBodyTriggerVolume(self):
        return _newton.ndBody_GetAsBodyTriggerVolume(self)

    def GetAsBodyKinematicSpecial(self):
        return _newton.ndBody_GetAsBodyKinematicSpecial(self)

    def GetId(self):
        return _newton.ndBody_GetId(self)

    def GetAABB(self, p0, p1):
        return _newton.ndBody_GetAABB(self, p0, p1)

    def GetInvMass(self):
        return _newton.ndBody_GetInvMass(self)

    def RayCast(self, callback, ray, maxT):
        return _newton.ndBody_RayCast(self, callback, ray, maxT)

    def GetCentreOfMass(self):
        return _newton.ndBody_GetCentreOfMass(self)

    def SetCentreOfMass(self, com):
        return _newton.ndBody_SetCentreOfMass(self, com)

    def GetNotifyCallback(self):
        return _newton.ndBody_GetNotifyCallback(self)

    def GetOmega(self):
        return _newton.ndBody_GetOmega(self)

    def GetMatrix(self):
        return _newton.ndBody_GetMatrix(self)

    def GetVelocity(self):
        return _newton.ndBody_GetVelocity(self)

    def GetPosition(self):
        return _newton.ndBody_GetPosition(self)

    def GetRotation(self):
        return _newton.ndBody_GetRotation(self)

    def GetGlobalGetCentreOfMass(self):
        return _newton.ndBody_GetGlobalGetCentreOfMass(self)

    def SetNotifyCallback(self, notify):
        return _newton.ndBody_SetNotifyCallback(self, notify)

    def SetOmega(self, veloc):
        return _newton.ndBody_SetOmega(self, veloc)

    def SetVelocity(self, veloc):
        return _newton.ndBody_SetVelocity(self, veloc)

    def SetMatrix(self, matrix):
        return _newton.ndBody_SetMatrix(self, matrix)

    def GetVelocityAtPoint(self, point):
        return _newton.ndBody_GetVelocityAtPoint(self, point)

    def SetOmegaNoSleep(self, veloc):
        return _newton.ndBody_SetOmegaNoSleep(self, veloc)

    def SetVelocityNoSleep(self, veloc):
        return _newton.ndBody_SetVelocityNoSleep(self, veloc)

    def SetMatrixNoSleep(self, matrix):
        return _newton.ndBody_SetMatrixNoSleep(self, matrix)

    def SetMatrixAndCentreOfMass(self, rotation, globalcom):
        return _newton.ndBody_SetMatrixAndCentreOfMass(self, rotation, globalcom)

# Register ndBody in _newton:
_newton.ndBody_swigregister(ndBody)

class ndBodyKinematic(ndBody):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndBodyKinematic_swiginit(self, _newton.new_ndBodyKinematic())
    __swig_destroy__ = _newton.delete_ndBodyKinematic

    def GetScene(self):
        return _newton.ndBodyKinematic_GetScene(self)

    def GetIndex(self):
        return _newton.ndBodyKinematic_GetIndex(self)

    def GetInvMass(self):
        return _newton.ndBodyKinematic_GetInvMass(self)

    def GetInvInertia(self):
        return _newton.ndBodyKinematic_GetInvInertia(self)

    def GetInvInertiaMatrix(self):
        return _newton.ndBodyKinematic_GetInvInertiaMatrix(self)

    def GetGyroAlpha(self):
        return _newton.ndBodyKinematic_GetGyroAlpha(self)

    def GetGyroTorque(self):
        return _newton.ndBodyKinematic_GetGyroTorque(self)

    def GetSleepState(self):
        return _newton.ndBodyKinematic_GetSleepState(self)

    def RestoreSleepState(self, state):
        return _newton.ndBodyKinematic_RestoreSleepState(self, state)

    def SetSleepState(self, state):
        return _newton.ndBodyKinematic_SetSleepState(self, state)

    def GetAutoSleep(self):
        return _newton.ndBodyKinematic_GetAutoSleep(self)

    def SetAutoSleep(self, state):
        return _newton.ndBodyKinematic_SetAutoSleep(self, state)

    def GetMaxLinearStep(self):
        return _newton.ndBodyKinematic_GetMaxLinearStep(self)

    def GetMaxAngularStep(self):
        return _newton.ndBodyKinematic_GetMaxAngularStep(self)

    def SetDebugMaxLinearAndAngularIntegrationStep(self, angleInRadian, stepInUnitPerSeconds):
        return _newton.ndBodyKinematic_SetDebugMaxLinearAndAngularIntegrationStep(self, angleInRadian, stepInUnitPerSeconds)

    def GetLinearDamping(self):
        return _newton.ndBodyKinematic_GetLinearDamping(self)

    def SetLinearDamping(self, linearDamp):
        return _newton.ndBodyKinematic_SetLinearDamping(self, linearDamp)

    def GetCachedDamping(self):
        return _newton.ndBodyKinematic_GetCachedDamping(self)

    def GetAngularDamping(self):
        return _newton.ndBodyKinematic_GetAngularDamping(self)

    def SetAngularDamping(self, angularDamp):
        return _newton.ndBodyKinematic_SetAngularDamping(self, angularDamp)

    def GetCollisionShape(self, *args):
        return _newton.ndBodyKinematic_GetCollisionShape(self, *args)

    def SetCollisionShape(self, shapeInstance):
        return _newton.ndBodyKinematic_SetCollisionShape(self, shapeInstance)

    def RayCast(self, callback, ray, maxT):
        return _newton.ndBodyKinematic_RayCast(self, callback, ray, maxT)

    def CalculateLinearMomentum(self):
        return _newton.ndBodyKinematic_CalculateLinearMomentum(self)

    def CalculateAngularMomentum(self):
        return _newton.ndBodyKinematic_CalculateAngularMomentum(self)

    def TotalEnergy(self):
        return _newton.ndBodyKinematic_TotalEnergy(self)

    def IntegrateVelocity(self, timestep):
        return _newton.ndBodyKinematic_IntegrateVelocity(self, timestep)

    def SetMatrixUpdateScene(self, matrix):
        return _newton.ndBodyKinematic_SetMatrixUpdateScene(self, matrix)

    def FindContact(self, otherBody):
        return _newton.ndBodyKinematic_FindContact(self, otherBody)

    def CalculateInertiaMatrix(self):
        return _newton.ndBodyKinematic_CalculateInertiaMatrix(self)

    def CalculateInvInertiaMatrix(self):
        return _newton.ndBodyKinematic_CalculateInvInertiaMatrix(self)

    def UpdateInvInertiaMatrix(self):
        return _newton.ndBodyKinematic_UpdateInvInertiaMatrix(self)

    def SetMassMatrix(self, *args):
        return _newton.ndBodyKinematic_SetMassMatrix(self, *args)

    def GetPrincipalAxis(self):
        return _newton.ndBodyKinematic_GetPrincipalAxis(self)

    def GetMassMatrix(self, *args):
        return _newton.ndBodyKinematic_GetMassMatrix(self, *args)

    def GetAsBodyKinematic(self):
        return _newton.ndBodyKinematic_GetAsBodyKinematic(self)

    def GetSkeleton(self):
        return _newton.ndBodyKinematic_GetSkeleton(self)

    def SetSkeleton(self, skeleton):
        return _newton.ndBodyKinematic_SetSkeleton(self, skeleton)

    def GetForce(self):
        return _newton.ndBodyKinematic_GetForce(self)

    def GetTorque(self):
        return _newton.ndBodyKinematic_GetTorque(self)

    def SetForce(self, force):
        return _newton.ndBodyKinematic_SetForce(self, force)

    def SetTorque(self, torque):
        return _newton.ndBodyKinematic_SetTorque(self, torque)

    def AddImpulse(self, pointVeloc, pointPosit, timestep):
        return _newton.ndBodyKinematic_AddImpulse(self, pointVeloc, pointPosit, timestep)

    def ApplyImpulsePair(self, linearImpulse, angularImpulse, timestep):
        return _newton.ndBodyKinematic_ApplyImpulsePair(self, linearImpulse, angularImpulse, timestep)

    def ApplyImpulsesAtPoint(self, count, impulseArray, pointArray, timestep):
        return _newton.ndBodyKinematic_ApplyImpulsesAtPoint(self, count, impulseArray, pointArray, timestep)

    def GetAccel(self):
        return _newton.ndBodyKinematic_GetAccel(self)

    def GetAlpha(self):
        return _newton.ndBodyKinematic_GetAlpha(self)

    def SetAccel(self, accel):
        return _newton.ndBodyKinematic_SetAccel(self, accel)

    def SetAlpha(self, alpha):
        return _newton.ndBodyKinematic_SetAlpha(self, alpha)

    def GetContactMap(self, *args):
        return _newton.ndBodyKinematic_GetContactMap(self, *args)

    def GetJointList(self):
        return _newton.ndBodyKinematic_GetJointList(self)

# Register ndBodyKinematic in _newton:
_newton.ndBodyKinematic_swigregister(ndBodyKinematic)

class ndBodySentinel(ndBodyKinematic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndBodySentinel_swiginit(self, _newton.new_ndBodySentinel())
    __swig_destroy__ = _newton.delete_ndBodySentinel

# Register ndBodySentinel in _newton:
_newton.ndBodySentinel_swigregister(ndBodySentinel)

class ndBodyTriggerVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndBodyTriggerVolume_swiginit(self, _newton.new_ndBodyTriggerVolume())
    __swig_destroy__ = _newton.delete_ndBodyTriggerVolume

    def GetAsBodyTriggerVolume(self):
        return _newton.ndBodyTriggerVolume_GetAsBodyTriggerVolume(self)

    def OnTrigger(self, body, timestep):
        return _newton.ndBodyTriggerVolume_OnTrigger(self, body, timestep)

    def OnTriggerEnter(self, body, timestep):
        return _newton.ndBodyTriggerVolume_OnTriggerEnter(self, body, timestep)

    def OnTriggerExit(self, body, timestep):
        return _newton.ndBodyTriggerVolume_OnTriggerExit(self, body, timestep)

    def SpecialUpdate(self, timestep):
        return _newton.ndBodyTriggerVolume_SpecialUpdate(self, timestep)

# Register ndBodyTriggerVolume in _newton:
_newton.ndBodyTriggerVolume_swigregister(ndBodyTriggerVolume)

class ndBodyPlayerCapsule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newton.ndBodyPlayerCapsule_swiginit(self, _newton.new_ndBodyPlayerCapsule(*args))
    __swig_destroy__ = _newton.delete_ndBodyPlayerCapsule

    def GetAsBodyPlayerCapsule(self):
        return _newton.ndBodyPlayerCapsule_GetAsBodyPlayerCapsule(self)

    def GetForwardSpeed(self):
        return _newton.ndBodyPlayerCapsule_GetForwardSpeed(self)

    def SetForwardSpeed(self, speed):
        return _newton.ndBodyPlayerCapsule_SetForwardSpeed(self, speed)

    def GetLateralSpeed(self):
        return _newton.ndBodyPlayerCapsule_GetLateralSpeed(self)

    def SetLateralSpeed(self, speed):
        return _newton.ndBodyPlayerCapsule_SetLateralSpeed(self, speed)

    def GetHeadingAngle(self):
        return _newton.ndBodyPlayerCapsule_GetHeadingAngle(self)

    def SetHeadingAngle(self, angle):
        return _newton.ndBodyPlayerCapsule_SetHeadingAngle(self, angle)

    def IsOnFloor(self):
        return _newton.ndBodyPlayerCapsule_IsOnFloor(self)

    def ApplyInputs(self, timestep):
        return _newton.ndBodyPlayerCapsule_ApplyInputs(self, timestep)

    def ContactFrictionCallback(self, position, normal, contactId, otherbody):
        return _newton.ndBodyPlayerCapsule_ContactFrictionCallback(self, position, normal, contactId, otherbody)

# Register ndBodyPlayerCapsule in _newton:
_newton.ndBodyPlayerCapsule_swigregister(ndBodyPlayerCapsule)

class ndBodyKinematicBase(ndBodyKinematic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndBodyKinematicBase_swiginit(self, _newton.new_ndBodyKinematicBase())
    __swig_destroy__ = _newton.delete_ndBodyKinematicBase

    def SpecialUpdate(self, timestep):
        return _newton.ndBodyKinematicBase_SpecialUpdate(self, timestep)

    def GetAsBodyKinematicSpecial(self):
        return _newton.ndBodyKinematicBase_GetAsBodyKinematicSpecial(self)

# Register ndBodyKinematicBase in _newton:
_newton.ndBodyKinematicBase_swigregister(ndBodyKinematicBase)

class ndBodyNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, defaultGravity):
        _newton.ndBodyNotify_swiginit(self, _newton.new_ndBodyNotify(defaultGravity))
    __swig_destroy__ = _newton.delete_ndBodyNotify

    def GetBody(self, *args):
        return _newton.ndBodyNotify_GetBody(self, *args)

    def GetUserData(self):
        return _newton.ndBodyNotify_GetUserData(self)

    def GetGravity(self):
        return _newton.ndBodyNotify_GetGravity(self)

    def SetGravity(self, defaultGravity):
        return _newton.ndBodyNotify_SetGravity(self, defaultGravity)

    def OnTransform(self, threadIndex, matrix):
        return _newton.ndBodyNotify_OnTransform(self, threadIndex, matrix)

    def OnApplyExternalForce(self, threadIndex, timestep):
        return _newton.ndBodyNotify_OnApplyExternalForce(self, threadIndex, timestep)

# Register ndBodyNotify in _newton:
_newton.ndBodyNotify_swigregister(ndBodyNotify)

class ndMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndMaterial_swiginit(self, _newton.new_ndMaterial())
    m_restitution = property(_newton.ndMaterial_m_restitution_get, _newton.ndMaterial_m_restitution_set)
    m_staticFriction0 = property(_newton.ndMaterial_m_staticFriction0_get, _newton.ndMaterial_m_staticFriction0_set)
    m_staticFriction1 = property(_newton.ndMaterial_m_staticFriction1_get, _newton.ndMaterial_m_staticFriction1_set)
    m_dynamicFriction0 = property(_newton.ndMaterial_m_dynamicFriction0_get, _newton.ndMaterial_m_dynamicFriction0_set)
    m_dynamicFriction1 = property(_newton.ndMaterial_m_dynamicFriction1_get, _newton.ndMaterial_m_dynamicFriction1_set)
    m_skinMargin = property(_newton.ndMaterial_m_skinMargin_get, _newton.ndMaterial_m_skinMargin_set)
    m_softness = property(_newton.ndMaterial_m_softness_get, _newton.ndMaterial_m_softness_set)
    m_flags = property(_newton.ndMaterial_m_flags_get, _newton.ndMaterial_m_flags_set)
    m_userFlags = property(_newton.ndMaterial_m_userFlags_get, _newton.ndMaterial_m_userFlags_set)
    __swig_destroy__ = _newton.delete_ndMaterial

# Register ndMaterial in _newton:
_newton.ndMaterial_swigregister(ndMaterial)

class ndContactNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, scene):
        _newton.ndContactNotify_swiginit(self, _newton.new_ndContactNotify(scene))
    __swig_destroy__ = _newton.delete_ndContactNotify

    def GetMaterial(self, arg2, arg3, arg4):
        return _newton.ndContactNotify_GetMaterial(self, arg2, arg3, arg4)

# Register ndContactNotify in _newton:
_newton.ndContactNotify_swigregister(ndContactNotify)

class ndRayCastNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _newton.delete_ndRayCastNotify

    def TraceShape(self, globalOrigin, globalDestination, shapeInstance, shapeGlobal):
        return _newton.ndRayCastNotify_TraceShape(self, globalOrigin, globalDestination, shapeInstance, shapeGlobal)

    def OnRayPrecastAction(self, arg2, arg3):
        return _newton.ndRayCastNotify_OnRayPrecastAction(self, arg2, arg3)

    def OnRayCastAction(self, contact, intersetParam):
        return _newton.ndRayCastNotify_OnRayCastAction(self, contact, intersetParam)
    m_contact = property(_newton.ndRayCastNotify_m_contact_get, _newton.ndRayCastNotify_m_contact_set)
    m_param = property(_newton.ndRayCastNotify_m_param_get, _newton.ndRayCastNotify_m_param_set)

# Register ndRayCastNotify in _newton:
_newton.ndRayCastNotify_swigregister(ndRayCastNotify)

class ndRayCastClosestHitCallback(ndRayCastNotify):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndRayCastClosestHitCallback_swiginit(self, _newton.new_ndRayCastClosestHitCallback())

    def OnRayPrecastAction(self, body, arg3):
        return _newton.ndRayCastClosestHitCallback_OnRayPrecastAction(self, body, arg3)

    def OnRayCastAction(self, contact, intersetParam):
        return _newton.ndRayCastClosestHitCallback_OnRayCastAction(self, contact, intersetParam)
    __swig_destroy__ = _newton.delete_ndRayCastClosestHitCallback

# Register ndRayCastClosestHitCallback in _newton:
_newton.ndRayCastClosestHitCallback_swigregister(ndRayCastClosestHitCallback)

class ndBodiesInAabbNotify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndBodiesInAabbNotify_swiginit(self, _newton.new_ndBodiesInAabbNotify())
    __swig_destroy__ = _newton.delete_ndBodiesInAabbNotify

    def Reset(self):
        return _newton.ndBodiesInAabbNotify_Reset(self)

    def OnOverlap(self, body):
        return _newton.ndBodiesInAabbNotify_OnOverlap(self, body)
    m_bodyArray = property(_newton.ndBodiesInAabbNotify_m_bodyArray_get, _newton.ndBodiesInAabbNotify_m_bodyArray_set)

# Register ndBodiesInAabbNotify in _newton:
_newton.ndBodiesInAabbNotify_swigregister(ndBodiesInAabbNotify)

NOMINAL_FPS = _newton.NOMINAL_FPS
class NewtonWorld(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.NewtonWorld_swiginit(self, _newton.new_NewtonWorld())
    __swig_destroy__ = _newton.delete_NewtonWorld

    def Update(self, timestep):
        return _newton.NewtonWorld_Update(self, timestep)

    def SetSubSteps(self, timestep):
        return _newton.NewtonWorld_SetSubSteps(self, timestep)

    def SetIterations(self, iterations):
        return _newton.NewtonWorld_SetIterations(self, iterations)

    def SetTimestep(self, nominalTimestep):
        return _newton.NewtonWorld_SetTimestep(self, nominalTimestep)

# Register NewtonWorld in _newton:
_newton.NewtonWorld_swigregister(NewtonWorld)



