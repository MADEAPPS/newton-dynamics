# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _newton
else:
    import _newton

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


ND_NEWTON_VERSION = _newton.ND_NEWTON_VERSION

def ndExp_VS__Fix(x):
    return _newton.ndExp_VS__Fix(x)
class ndFloatSign(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_iVal = property(_newton.ndFloatSign_m_iVal_get, _newton.ndFloatSign_m_iVal_set)
    m_fVal = property(_newton.ndFloatSign_m_fVal_get, _newton.ndFloatSign_m_fVal_set)

    def __init__(self):
        _newton.ndFloatSign_swiginit(self, _newton.new_ndFloatSign())
    __swig_destroy__ = _newton.delete_ndFloatSign

# Register ndFloatSign in _newton:
_newton.ndFloatSign_swigregister(ndFloatSign)

class ndIntPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndIntPtr_swiginit(self, _newton.new_ndIntPtr())
    m_ptr = property(_newton.ndIntPtr_m_ptr_get, _newton.ndIntPtr_m_ptr_set)
    m_int = property(_newton.ndIntPtr_m_int_get, _newton.ndIntPtr_m_int_set)
    __swig_destroy__ = _newton.delete_ndIntPtr

# Register ndIntPtr in _newton:
_newton.ndIntPtr_swigregister(ndIntPtr)

class ndDoubleInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ptr = property(_newton.ndDoubleInt_m_ptr_get, _newton.ndDoubleInt_m_ptr_set)
    m_int = property(_newton.ndDoubleInt_m_int_get, _newton.ndDoubleInt_m_int_set)
    m_float = property(_newton.ndDoubleInt_m_float_get, _newton.ndDoubleInt_m_float_set)

    def __init__(self):
        _newton.ndDoubleInt_swiginit(self, _newton.new_ndDoubleInt())
    __swig_destroy__ = _newton.delete_ndDoubleInt

# Register ndDoubleInt in _newton:
_newton.ndDoubleInt_swigregister(ndDoubleInt)

class ndTriplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_newton.ndTriplex_m_x_get, _newton.ndTriplex_m_x_set)
    m_y = property(_newton.ndTriplex_m_y_get, _newton.ndTriplex_m_y_set)
    m_z = property(_newton.ndTriplex_m_z_get, _newton.ndTriplex_m_z_set)

    def __init__(self):
        _newton.ndTriplex_swiginit(self, _newton.new_ndTriplex())
    __swig_destroy__ = _newton.delete_ndTriplex

# Register ndTriplex in _newton:
_newton.ndTriplex_swigregister(ndTriplex)

class ndTriplexReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newton.ndTriplexReal_swiginit(self, _newton.new_ndTriplexReal(*args))
    m_x = property(_newton.ndTriplexReal_m_x_get, _newton.ndTriplexReal_m_x_set)
    m_y = property(_newton.ndTriplexReal_m_y_get, _newton.ndTriplexReal_m_y_set)
    m_z = property(_newton.ndTriplexReal_m_z_get, _newton.ndTriplexReal_m_z_set)
    __swig_destroy__ = _newton.delete_ndTriplexReal

# Register ndTriplexReal in _newton:
_newton.ndTriplexReal_swigregister(ndTriplexReal)

class ndClassAlloc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndClassAlloc_swiginit(self, _newton.new_ndClassAlloc())

    def CreateArray(self, size):
        return _newton.ndClassAlloc_CreateArray(self, size)

    def DestroyArray(self, ptr):
        return _newton.ndClassAlloc_DestroyArray(self, ptr)

    def Create(self, *args):
        return _newton.ndClassAlloc_Create(self, *args)

    def Destroy(self, *args):
        return _newton.ndClassAlloc_Destroy(self, *args)

    @staticmethod
    def Malloc(size):
        return _newton.ndClassAlloc_Malloc(size)

    @staticmethod
    def Free(ptr):
        return _newton.ndClassAlloc_Free(ptr)
    __swig_destroy__ = _newton.delete_ndClassAlloc

# Register ndClassAlloc in _newton:
_newton.ndClassAlloc_swigregister(ndClassAlloc)

def ndClassAlloc_Malloc(size):
    return _newton.ndClassAlloc_Malloc(size)

def ndClassAlloc_Free(ptr):
    return _newton.ndClassAlloc_Free(ptr)


def ndGetZeroMatrix():
    return _newton.ndGetZeroMatrix()

def ndGetIdentityMatrix():
    return _newton.ndGetIdentityMatrix()

def ndYawMatrix(ang):
    return _newton.ndYawMatrix(ang)

def ndRollMatrix(ang):
    return _newton.ndRollMatrix(ang)

def ndPitchMatrix(ang):
    return _newton.ndPitchMatrix(ang)

def ndGramSchmidtMatrix(dir):
    return _newton.ndGramSchmidtMatrix(dir)

def ndCovarianceMatrix(p, q):
    return _newton.ndCovarianceMatrix(p, q)

def ndCalculateMatrix(*args):
    return _newton.ndCalculateMatrix(*args)
class ndMatrix(ndClassAlloc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Inverse(self):
        return _newton.ndMatrix_Inverse(self)

    def OrthoInverse(self):
        return _newton.ndMatrix_OrthoInverse(self)

    def Transpose3x3(self):
        return _newton.ndMatrix_Transpose3x3(self)

    def Transpose4X4(self):
        return _newton.ndMatrix_Transpose4X4(self)

    def RotateVector(self, v):
        return _newton.ndMatrix_RotateVector(self, v)

    def UnrotateVector(self, v):
        return _newton.ndMatrix_UnrotateVector(self, v)

    def TransformVector(self, v):
        return _newton.ndMatrix_TransformVector(self, v)

    def UntransformVector(self, v):
        return _newton.ndMatrix_UntransformVector(self, v)

    def TransformVector1x4(self, v):
        return _newton.ndMatrix_TransformVector1x4(self, v)

    def TransformPlane(self, localPlane):
        return _newton.ndMatrix_TransformPlane(self, localPlane)

    def UntransformPlane(self, globalPlane):
        return _newton.ndMatrix_UntransformPlane(self, globalPlane)

    def Inverse4x4(self):
        return _newton.ndMatrix_Inverse4x4(self)

    def SolveByGaussianElimination(self, v):
        return _newton.ndMatrix_SolveByGaussianElimination(self, v)

    def TransformBBox(self, p0local, p1local, p0, p1):
        return _newton.ndMatrix_TransformBBox(self, p0local, p1local, p0, p1)

    def CalcPitchYawRoll(self, euler):
        return _newton.ndMatrix_CalcPitchYawRoll(self, euler)

    def TransformTriplex(self, *args):
        return _newton.ndMatrix_TransformTriplex(self, *args)

    def SanityCheck(self):
        return _newton.ndMatrix_SanityCheck(self)

    def TestIdentity(self):
        return _newton.ndMatrix_TestIdentity(self)

    def TestSymetric3x3(self):
        return _newton.ndMatrix_TestSymetric3x3(self)

    def TestOrthogonal(self, *args):
        return _newton.ndMatrix_TestOrthogonal(self, *args)

    def Multiply3X3(self, B):
        return _newton.ndMatrix_Multiply3X3(self, B)

    def __mul__(self, B):
        return _newton.ndMatrix___mul__(self, B)

    def EigenVectors(self):
        return _newton.ndMatrix_EigenVectors(self)

    def PolarDecomposition(self, transformMatrix, scale, stretchAxis):
        return _newton.ndMatrix_PolarDecomposition(self, transformMatrix, scale, stretchAxis)

    def __init__(self, *args):
        _newton.ndMatrix_swiginit(self, _newton.new_ndMatrix(*args))
    m_front = property(_newton.ndMatrix_m_front_get, _newton.ndMatrix_m_front_set)
    m_up = property(_newton.ndMatrix_m_up_get, _newton.ndMatrix_m_up_set)
    m_right = property(_newton.ndMatrix_m_right_get, _newton.ndMatrix_m_right_set)
    m_posit = property(_newton.ndMatrix_m_posit_get, _newton.ndMatrix_m_posit_set)
    __swig_destroy__ = _newton.delete_ndMatrix

# Register ndMatrix in _newton:
_newton.ndMatrix_swigregister(ndMatrix)

class ndQuaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _newton.ndQuaternion_swiginit(self, _newton.new_ndQuaternion(*args))

    def Normalize(self):
        return _newton.ndQuaternion_Normalize(self)

    def Scale(self, scale):
        return _newton.ndQuaternion_Scale(self, scale)

    def Inverse(self):
        return _newton.ndQuaternion_Inverse(self)

    def __add__(self, B):
        return _newton.ndQuaternion___add__(self, B)

    def __sub__(self, B):
        return _newton.ndQuaternion___sub__(self, B)

    def __mul__(self, B):
        return _newton.ndQuaternion___mul__(self, B)

    def GetEulerAngles(self, euler):
        return _newton.ndQuaternion_GetEulerAngles(self, euler)

    def RotateVector(self, point):
        return _newton.ndQuaternion_RotateVector(self, point)

    def UnrotateVector(self, point):
        return _newton.ndQuaternion_UnrotateVector(self, point)

    def Slerp(self, q1, t):
        return _newton.ndQuaternion_Slerp(self, q1, t)

    def CalcAverageOmega(self, q1, invdt):
        return _newton.ndQuaternion_CalcAverageOmega(self, q1, invdt)

    def IntegrateOmega(self, omega, timestep):
        return _newton.ndQuaternion_IntegrateOmega(self, omega, timestep)
    __swig_destroy__ = _newton.delete_ndQuaternion

# Register ndQuaternion in _newton:
_newton.ndQuaternion_swigregister(ndQuaternion)

m_box = _newton.m_box
m_cone = _newton.m_cone
m_sphere = _newton.m_sphere
m_capsule = _newton.m_capsule
m_cylinder = _newton.m_cylinder
m_chamferCylinder = _newton.m_chamferCylinder
m_userDefinedImplicit = _newton.m_userDefinedImplicit
m_convexHull = _newton.m_convexHull
m_compound = _newton.m_compound
m_staticMesh = _newton.m_staticMesh
m_heightField = _newton.m_heightField
m_staticProceduralMesh = _newton.m_staticProceduralMesh
m_nullCollision = _newton.m_nullCollision
m_pointCollision = _newton.m_pointCollision
m_polygonCollision = _newton.m_polygonCollision
m_boundingBoxHierachy = _newton.m_boundingBoxHierachy
class ndShapeMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndShapeMaterial_swiginit(self, _newton.new_ndShapeMaterial())
    m_userId = property(_newton.ndShapeMaterial_m_userId_get, _newton.ndShapeMaterial_m_userId_set)
    m_data = property(_newton.ndShapeMaterial_m_data_get, _newton.ndShapeMaterial_m_data_set)
    m_userParam = property(_newton.ndShapeMaterial_m_userParam_get, _newton.ndShapeMaterial_m_userParam_set)
    __swig_destroy__ = _newton.delete_ndShapeMaterial

# Register ndShapeMaterial in _newton:
_newton.ndShapeMaterial_swigregister(ndShapeMaterial)

class ndBoxInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_newton.ndBoxInfo_m_x_get, _newton.ndBoxInfo_m_x_set)
    m_y = property(_newton.ndBoxInfo_m_y_get, _newton.ndBoxInfo_m_y_set)
    m_z = property(_newton.ndBoxInfo_m_z_get, _newton.ndBoxInfo_m_z_set)

    def __init__(self):
        _newton.ndBoxInfo_swiginit(self, _newton.new_ndBoxInfo())
    __swig_destroy__ = _newton.delete_ndBoxInfo

# Register ndBoxInfo in _newton:
_newton.ndBoxInfo_swigregister(ndBoxInfo)

class ndPointInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndPointInfo_m_noUsed_get, _newton.ndPointInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndPointInfo_swiginit(self, _newton.new_ndPointInfo())
    __swig_destroy__ = _newton.delete_ndPointInfo

# Register ndPointInfo in _newton:
_newton.ndPointInfo_swigregister(ndPointInfo)

class ndSphereInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newton.ndSphereInfo_m_radius_get, _newton.ndSphereInfo_m_radius_set)

    def __init__(self):
        _newton.ndSphereInfo_swiginit(self, _newton.new_ndSphereInfo())
    __swig_destroy__ = _newton.delete_ndSphereInfo

# Register ndSphereInfo in _newton:
_newton.ndSphereInfo_swigregister(ndSphereInfo)

class ndCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newton.ndCylinderInfo_m_radio0_get, _newton.ndCylinderInfo_m_radio0_set)
    m_radio1 = property(_newton.ndCylinderInfo_m_radio1_get, _newton.ndCylinderInfo_m_radio1_set)
    m_height = property(_newton.ndCylinderInfo_m_height_get, _newton.ndCylinderInfo_m_height_set)

    def __init__(self):
        _newton.ndCylinderInfo_swiginit(self, _newton.new_ndCylinderInfo())
    __swig_destroy__ = _newton.delete_ndCylinderInfo

# Register ndCylinderInfo in _newton:
_newton.ndCylinderInfo_swigregister(ndCylinderInfo)

class ndCapsuleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radio0 = property(_newton.ndCapsuleInfo_m_radio0_get, _newton.ndCapsuleInfo_m_radio0_set)
    m_radio1 = property(_newton.ndCapsuleInfo_m_radio1_get, _newton.ndCapsuleInfo_m_radio1_set)
    m_height = property(_newton.ndCapsuleInfo_m_height_get, _newton.ndCapsuleInfo_m_height_set)

    def __init__(self):
        _newton.ndCapsuleInfo_swiginit(self, _newton.new_ndCapsuleInfo())
    __swig_destroy__ = _newton.delete_ndCapsuleInfo

# Register ndCapsuleInfo in _newton:
_newton.ndCapsuleInfo_swigregister(ndCapsuleInfo)

class ndConeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_radius = property(_newton.ndConeInfo_m_radius_get, _newton.ndConeInfo_m_radius_set)
    m_height = property(_newton.ndConeInfo_m_height_get, _newton.ndConeInfo_m_height_set)

    def __init__(self):
        _newton.ndConeInfo_swiginit(self, _newton.new_ndConeInfo())
    __swig_destroy__ = _newton.delete_ndConeInfo

# Register ndConeInfo in _newton:
_newton.ndConeInfo_swigregister(ndConeInfo)

class ndChamferCylinderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_r = property(_newton.ndChamferCylinderInfo_m_r_get, _newton.ndChamferCylinderInfo_m_r_set)
    m_height = property(_newton.ndChamferCylinderInfo_m_height_get, _newton.ndChamferCylinderInfo_m_height_set)

    def __init__(self):
        _newton.ndChamferCylinderInfo_swiginit(self, _newton.new_ndChamferCylinderInfo())
    __swig_destroy__ = _newton.delete_ndChamferCylinderInfo

# Register ndChamferCylinderInfo in _newton:
_newton.ndChamferCylinderInfo_swigregister(ndChamferCylinderInfo)

class ndConvexHullInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newton.ndConvexHullInfo_m_vertexCount_get, _newton.ndConvexHullInfo_m_vertexCount_set)
    m_strideInBytes = property(_newton.ndConvexHullInfo_m_strideInBytes_get, _newton.ndConvexHullInfo_m_strideInBytes_set)
    m_faceCount = property(_newton.ndConvexHullInfo_m_faceCount_get, _newton.ndConvexHullInfo_m_faceCount_set)
    m_vertex = property(_newton.ndConvexHullInfo_m_vertex_get, _newton.ndConvexHullInfo_m_vertex_set)

    def __init__(self):
        _newton.ndConvexHullInfo_swiginit(self, _newton.new_ndConvexHullInfo())
    __swig_destroy__ = _newton.delete_ndConvexHullInfo

# Register ndConvexHullInfo in _newton:
_newton.ndConvexHullInfo_swigregister(ndConvexHullInfo)

class ndCompoundInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndCompoundInfo_m_noUsed_get, _newton.ndCompoundInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndCompoundInfo_swiginit(self, _newton.new_ndCompoundInfo())
    __swig_destroy__ = _newton.delete_ndCompoundInfo

# Register ndCompoundInfo in _newton:
_newton.ndCompoundInfo_swigregister(ndCompoundInfo)

class ndProceduralInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_noUsed = property(_newton.ndProceduralInfo_m_noUsed_get, _newton.ndProceduralInfo_m_noUsed_set)

    def __init__(self):
        _newton.ndProceduralInfo_swiginit(self, _newton.new_ndProceduralInfo())
    __swig_destroy__ = _newton.delete_ndProceduralInfo

# Register ndProceduralInfo in _newton:
_newton.ndProceduralInfo_swigregister(ndProceduralInfo)

class ndCollisionBvhInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertexCount = property(_newton.ndCollisionBvhInfo_m_vertexCount_get, _newton.ndCollisionBvhInfo_m_vertexCount_set)
    m_indexCount = property(_newton.ndCollisionBvhInfo_m_indexCount_get, _newton.ndCollisionBvhInfo_m_indexCount_set)

    def __init__(self):
        _newton.ndCollisionBvhInfo_swiginit(self, _newton.new_ndCollisionBvhInfo())
    __swig_destroy__ = _newton.delete_ndCollisionBvhInfo

# Register ndCollisionBvhInfo in _newton:
_newton.ndCollisionBvhInfo_swigregister(ndCollisionBvhInfo)

class ndHeighfieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_width = property(_newton.ndHeighfieldInfo_m_width_get, _newton.ndHeighfieldInfo_m_width_set)
    m_height = property(_newton.ndHeighfieldInfo_m_height_get, _newton.ndHeighfieldInfo_m_height_set)
    m_gridsDiagonals = property(_newton.ndHeighfieldInfo_m_gridsDiagonals_get, _newton.ndHeighfieldInfo_m_gridsDiagonals_set)
    m_horizonalScale_x = property(_newton.ndHeighfieldInfo_m_horizonalScale_x_get, _newton.ndHeighfieldInfo_m_horizonalScale_x_set)
    m_horizonalScale_z = property(_newton.ndHeighfieldInfo_m_horizonalScale_z_get, _newton.ndHeighfieldInfo_m_horizonalScale_z_set)
    m_elevation = property(_newton.ndHeighfieldInfo_m_elevation_get, _newton.ndHeighfieldInfo_m_elevation_set)
    m_atributes = property(_newton.ndHeighfieldInfo_m_atributes_get, _newton.ndHeighfieldInfo_m_atributes_set)

    def __init__(self):
        _newton.ndHeighfieldInfo_swiginit(self, _newton.new_ndHeighfieldInfo())
    __swig_destroy__ = _newton.delete_ndHeighfieldInfo

# Register ndHeighfieldInfo in _newton:
_newton.ndHeighfieldInfo_swigregister(ndHeighfieldInfo)

class ndShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.ndShapeInfo_swiginit(self, _newton.new_ndShapeInfo())

    def GetHash(self, hash):
        return _newton.ndShapeInfo_GetHash(self, hash)
    m_offsetMatrix = property(_newton.ndShapeInfo_m_offsetMatrix_get, _newton.ndShapeInfo_m_offsetMatrix_set)
    m_scale = property(_newton.ndShapeInfo_m_scale_get, _newton.ndShapeInfo_m_scale_set)
    m_shapeMaterial = property(_newton.ndShapeInfo_m_shapeMaterial_get, _newton.ndShapeInfo_m_shapeMaterial_set)
    m_collisionType = property(_newton.ndShapeInfo_m_collisionType_get, _newton.ndShapeInfo_m_collisionType_set)
    __swig_destroy__ = _newton.delete_ndShapeInfo

# Register ndShapeInfo in _newton:
_newton.ndShapeInfo_swigregister(ndShapeInfo)

class ndShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName(self):
        return _newton.ndShape_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShape_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShape_SuperClassName(self)
    __swig_destroy__ = _newton.delete_ndShape

    def GetRefCount(self):
        return _newton.ndShape_GetRefCount(self)

    def Release(self):
        return _newton.ndShape_Release(self)

    def AddRef(self):
        return _newton.ndShape_AddRef(self)

    def GetAsShapeBox(self):
        return _newton.ndShape_GetAsShapeBox(self)

    def GetAsShapeNull(self):
        return _newton.ndShape_GetAsShapeNull(self)

    def GetAsShapeCone(self):
        return _newton.ndShape_GetAsShapeCone(self)

    def GetAsShapePoint(self):
        return _newton.ndShape_GetAsShapePoint(self)

    def GetAsShapeConvex(self):
        return _newton.ndShape_GetAsShapeConvex(self)

    def GetAsShapeSphere(self):
        return _newton.ndShape_GetAsShapeSphere(self)

    def GetAsShapeCapsule(self):
        return _newton.ndShape_GetAsShapeCapsule(self)

    def GetAsShapeCylinder(self):
        return _newton.ndShape_GetAsShapeCylinder(self)

    def GetAsShapeCompound(self):
        return _newton.ndShape_GetAsShapeCompound(self)

    def GetAsShapeStaticBVH(self):
        return _newton.ndShape_GetAsShapeStaticBVH(self)

    def GetAsShapeStaticMesh(self):
        return _newton.ndShape_GetAsShapeStaticMesh(self)

    def GetAsShapeConvexHull(self):
        return _newton.ndShape_GetAsShapeConvexHull(self)

    def GetAsShapeHeightfield(self):
        return _newton.ndShape_GetAsShapeHeightfield(self)

    def GetAsShapeConvexPolygon(self):
        return _newton.ndShape_GetAsShapeConvexPolygon(self)

    def GetAsShapeChamferCylinder(self):
        return _newton.ndShape_GetAsShapeChamferCylinder(self)

    def GetAsShapeUserDefinedImplicit(self):
        return _newton.ndShape_GetAsShapeUserDefinedImplicit(self)

    def GetAsShapeStaticProceduralMesh(self):
        return _newton.ndShape_GetAsShapeStaticProceduralMesh(self)

    def GetConvexVertexCount(self):
        return _newton.ndShape_GetConvexVertexCount(self)

    def GetObbSize(self):
        return _newton.ndShape_GetObbSize(self)

    def GetObbOrigin(self):
        return _newton.ndShape_GetObbOrigin(self)

    def GetUmbraClipSize(self):
        return _newton.ndShape_GetUmbraClipSize(self)

    def MassProperties(self):
        return _newton.ndShape_MassProperties(self)

    def GetShapeInfo(self):
        return _newton.ndShape_GetShapeInfo(self)

    def CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix):
        return _newton.ndShape_CalculateInertiaAndCenterOfMass(self, alignMatrix, localScale, matrix)

    def CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass):
        return _newton.ndShape_CalculateMassProperties(self, offset, inertia, crossInertia, centerOfMass)

    def GetVolume(self):
        return _newton.ndShape_GetVolume(self)

    def GetBoxMinRadius(self):
        return _newton.ndShape_GetBoxMinRadius(self)

    def GetBoxMaxRadius(self):
        return _newton.ndShape_GetBoxMaxRadius(self)

    def GetHash(self, hash=0):
        return _newton.ndShape_GetHash(self, hash)

    def SupportVertex(self, dir):
        return _newton.ndShape_SupportVertex(self, dir)

    def SupportVertexSpecial(self, dir, skinMargin):
        return _newton.ndShape_SupportVertexSpecial(self, dir, skinMargin)

    def CalculateAabb(self, matrix, p0, p1):
        return _newton.ndShape_CalculateAabb(self, matrix, p0, p1)

    def SupportVertexSpecialProjectPoint(self, point, dir):
        return _newton.ndShape_SupportVertexSpecialProjectPoint(self, point, dir)

    def CalculatePlaneIntersection(self, normal, point, contactsOut):
        return _newton.ndShape_CalculatePlaneIntersection(self, normal, point, contactsOut)

    def CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale):
        return _newton.ndShape_CalculateVolumeIntegral(self, globalMatrix, globalPlane, parentScale)

    def RayCast(self, callback, localP0, localP1, maxT, body, contactOut):
        return _newton.ndShape_RayCast(self, callback, localP0, localP1, maxT, body, contactOut)

    def DebugShape(self, matrix, debugCallback):
        return _newton.ndShape_DebugShape(self, matrix, debugCallback)

# Register ndShape in _newton:
_newton.ndShape_swigregister(ndShape)

def ndShape_StaticClassName():
    return _newton.ndShape_StaticClassName()

class ndShapeBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ClassName(self):
        return _newton.ndShapeBox_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShapeBox_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShapeBox_SuperClassName(self)

    def __init__(self, size_x, size_y, size_z):
        _newton.ndShapeBox_swiginit(self, _newton.new_ndShapeBox(size_x, size_y, size_z))
    __swig_destroy__ = _newton.delete_ndShapeBox

    def GetAsShapeBox(self):
        return _newton.ndShapeBox_GetAsShapeBox(self)

# Register ndShapeBox in _newton:
_newton.ndShapeBox_swigregister(ndShapeBox)

def ndShapeBox_StaticClassName():
    return _newton.ndShapeBox_StaticClassName()

D_CONE_SEGMENTS = _newton.D_CONE_SEGMENTS
class ndShapeCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ClassName(self):
        return _newton.ndShapeCone_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShapeCone_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShapeCone_SuperClassName(self)

    def __init__(self, radio, height):
        _newton.ndShapeCone_swiginit(self, _newton.new_ndShapeCone(radio, height))
    __swig_destroy__ = _newton.delete_ndShapeCone

    def GetAsShapeCone(self):
        return _newton.ndShapeCone_GetAsShapeCone(self)

# Register ndShapeCone in _newton:
_newton.ndShapeCone_swigregister(ndShapeCone)

def ndShapeCone_StaticClassName():
    return _newton.ndShapeCone_StaticClassName()

D_CLIP_MAX_COUNT = _newton.D_CLIP_MAX_COUNT
D_CLIP_MAX_POINT_COUNT = _newton.D_CLIP_MAX_POINT_COUNT
class ndShapeConvex(ndShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ClassName(self):
        return _newton.ndShapeConvex_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShapeConvex_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShapeConvex_SuperClassName(self)

# Register ndShapeConvex in _newton:
_newton.ndShapeConvex_swigregister(ndShapeConvex)

def ndShapeConvex_StaticClassName():
    return _newton.ndShapeConvex_StaticClassName()

D_SPHERE_VERTEX_COUNT = _newton.D_SPHERE_VERTEX_COUNT
class ndShapeSphere(ndShapeConvex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ClassName(self):
        return _newton.ndShapeSphere_ClassName(self)

    @staticmethod
    def StaticClassName():
        return _newton.ndShapeSphere_StaticClassName()

    def SuperClassName(self):
        return _newton.ndShapeSphere_SuperClassName(self)

    def __init__(self, radius):
        _newton.ndShapeSphere_swiginit(self, _newton.new_ndShapeSphere(radius))
    __swig_destroy__ = _newton.delete_ndShapeSphere

    def GetAsShapeSphere(self):
        return _newton.ndShapeSphere_GetAsShapeSphere(self)

# Register ndShapeSphere in _newton:
_newton.ndShapeSphere_swigregister(ndShapeSphere)

def ndShapeSphere_StaticClassName():
    return _newton.ndShapeSphere_StaticClassName()

NOMINAL_FPS = _newton.NOMINAL_FPS
class NewtonWorld(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _newton.NewtonWorld_swiginit(self, _newton.new_NewtonWorld())
    __swig_destroy__ = _newton.delete_NewtonWorld

    def Update(self, timestep):
        return _newton.NewtonWorld_Update(self, timestep)

    def SetSubSteps(self, timestep):
        return _newton.NewtonWorld_SetSubSteps(self, timestep)

    def SetIterations(self, iterations):
        return _newton.NewtonWorld_SetIterations(self, iterations)

    def SetTimestep(self, nominalTimestep):
        return _newton.NewtonWorld_SetTimestep(self, nominalTimestep)

# Register NewtonWorld in _newton:
_newton.NewtonWorld_swigregister(NewtonWorld)



